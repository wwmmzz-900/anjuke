// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: house.proto

package v3

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationHousePersonalRecommendList = "/api.house.v3.House/PersonalRecommendList"
const OperationHouseRecommendList = "/api.house.v3.House/RecommendList"
const OperationHouseReserveHouse = "/api.house.v3.House/ReserveHouse"

type HouseHTTPServer interface {
	// PersonalRecommendList 个性化推荐列表，根据用户浏览习惯推荐
	PersonalRecommendList(context.Context, *PersonalRecommendRequest) (*HouseRecommendReply, error)
	// RecommendList 普通推荐列表
	RecommendList(context.Context, *HouseRecommendRequest) (*HouseRecommendReply, error)
	// ReserveHouse 预约看房
	ReserveHouse(context.Context, *ReserveHouseRequest) (*ReserveHouseReply, error)
}

func RegisterHouseHTTPServer(s *http.Server, srv HouseHTTPServer) {
	r := s.Route("/")
	r.GET("/house/recommend", _House_RecommendList0_HTTP_Handler(srv))
	r.GET("/house/personal-recommend", _House_PersonalRecommendList0_HTTP_Handler(srv))
	r.POST("/house/reserve", _House_ReserveHouse0_HTTP_Handler(srv))
}

func _House_RecommendList0_HTTP_Handler(srv HouseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HouseRecommendRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHouseRecommendList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecommendList(ctx, req.(*HouseRecommendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HouseRecommendReply)
		return ctx.Result(200, reply)
	}
}

func _House_PersonalRecommendList0_HTTP_Handler(srv HouseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PersonalRecommendRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHousePersonalRecommendList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PersonalRecommendList(ctx, req.(*PersonalRecommendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HouseRecommendReply)
		return ctx.Result(200, reply)
	}
}

func _House_ReserveHouse0_HTTP_Handler(srv HouseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReserveHouseRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHouseReserveHouse)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReserveHouse(ctx, req.(*ReserveHouseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReserveHouseReply)
		return ctx.Result(200, reply)
	}
}

type HouseHTTPClient interface {
	PersonalRecommendList(ctx context.Context, req *PersonalRecommendRequest, opts ...http.CallOption) (rsp *HouseRecommendReply, err error)
	RecommendList(ctx context.Context, req *HouseRecommendRequest, opts ...http.CallOption) (rsp *HouseRecommendReply, err error)
	ReserveHouse(ctx context.Context, req *ReserveHouseRequest, opts ...http.CallOption) (rsp *ReserveHouseReply, err error)
}

type HouseHTTPClientImpl struct {
	cc *http.Client
}

func NewHouseHTTPClient(client *http.Client) HouseHTTPClient {
	return &HouseHTTPClientImpl{client}
}

func (c *HouseHTTPClientImpl) PersonalRecommendList(ctx context.Context, in *PersonalRecommendRequest, opts ...http.CallOption) (*HouseRecommendReply, error) {
	var out HouseRecommendReply
	pattern := "/house/personal-recommend"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHousePersonalRecommendList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HouseHTTPClientImpl) RecommendList(ctx context.Context, in *HouseRecommendRequest, opts ...http.CallOption) (*HouseRecommendReply, error) {
	var out HouseRecommendReply
	pattern := "/house/recommend"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHouseRecommendList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HouseHTTPClientImpl) ReserveHouse(ctx context.Context, in *ReserveHouseRequest, opts ...http.CallOption) (*ReserveHouseReply, error) {
	var out ReserveHouseReply
	pattern := "/house/reserve"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHouseReserveHouse))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
