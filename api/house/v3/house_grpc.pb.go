// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: house/v3/house.proto

package v3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	House_RecommendList_FullMethodName         = "/api.house.v3.House/RecommendList"
	House_PersonalRecommendList_FullMethodName = "/api.house.v3.House/PersonalRecommendList"
	House_ReserveHouse_FullMethodName          = "/api.house.v3.House/ReserveHouse"
	House_StartChat_FullMethodName             = "/api.house.v3.House/StartChat"
	House_FavoriteHouse_FullMethodName         = "/api.house.v3.House/FavoriteHouse"
	House_UnfavoriteHouse_FullMethodName       = "/api.house.v3.House/UnfavoriteHouse"
	House_GetFavoriteList_FullMethodName       = "/api.house.v3.House/GetFavoriteList"
	House_CheckFavoriteStatus_FullMethodName   = "/api.house.v3.House/CheckFavoriteStatus"
)

// HouseClient is the client API for House service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HouseClient interface {
	// 普通推荐列表
	RecommendList(ctx context.Context, in *HouseRecommendRequest, opts ...grpc.CallOption) (*HouseRecommendReply, error)
	// 个性化推荐列表，根据用户浏览习惯推荐
	PersonalRecommendList(ctx context.Context, in *PersonalRecommendRequest, opts ...grpc.CallOption) (*HouseRecommendReply, error)
	// 预约看房
	ReserveHouse(ctx context.Context, in *ReserveHouseRequest, opts ...grpc.CallOption) (*ReserveHouseReply, error)
	// 发起在线聊天
	StartChat(ctx context.Context, in *StartChatRequest, opts ...grpc.CallOption) (*StartChatReply, error)
	// 收藏房源
	FavoriteHouse(ctx context.Context, in *FavoriteHouseRequest, opts ...grpc.CallOption) (*FavoriteHouseReply, error)
	// 取消收藏房源
	UnfavoriteHouse(ctx context.Context, in *UnfavoriteHouseRequest, opts ...grpc.CallOption) (*UnfavoriteHouseReply, error)
	// 获取收藏列表
	GetFavoriteList(ctx context.Context, in *GetFavoriteListRequest, opts ...grpc.CallOption) (*GetFavoriteListReply, error)
	// 检查收藏状态
	CheckFavoriteStatus(ctx context.Context, in *CheckFavoriteStatusRequest, opts ...grpc.CallOption) (*CheckFavoriteStatusReply, error)
}

type houseClient struct {
	cc grpc.ClientConnInterface
}

func NewHouseClient(cc grpc.ClientConnInterface) HouseClient {
	return &houseClient{cc}
}

func (c *houseClient) RecommendList(ctx context.Context, in *HouseRecommendRequest, opts ...grpc.CallOption) (*HouseRecommendReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HouseRecommendReply)
	err := c.cc.Invoke(ctx, House_RecommendList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseClient) PersonalRecommendList(ctx context.Context, in *PersonalRecommendRequest, opts ...grpc.CallOption) (*HouseRecommendReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HouseRecommendReply)
	err := c.cc.Invoke(ctx, House_PersonalRecommendList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseClient) ReserveHouse(ctx context.Context, in *ReserveHouseRequest, opts ...grpc.CallOption) (*ReserveHouseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveHouseReply)
	err := c.cc.Invoke(ctx, House_ReserveHouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseClient) StartChat(ctx context.Context, in *StartChatRequest, opts ...grpc.CallOption) (*StartChatReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartChatReply)
	err := c.cc.Invoke(ctx, House_StartChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseClient) FavoriteHouse(ctx context.Context, in *FavoriteHouseRequest, opts ...grpc.CallOption) (*FavoriteHouseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FavoriteHouseReply)
	err := c.cc.Invoke(ctx, House_FavoriteHouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseClient) UnfavoriteHouse(ctx context.Context, in *UnfavoriteHouseRequest, opts ...grpc.CallOption) (*UnfavoriteHouseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnfavoriteHouseReply)
	err := c.cc.Invoke(ctx, House_UnfavoriteHouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseClient) GetFavoriteList(ctx context.Context, in *GetFavoriteListRequest, opts ...grpc.CallOption) (*GetFavoriteListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFavoriteListReply)
	err := c.cc.Invoke(ctx, House_GetFavoriteList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseClient) CheckFavoriteStatus(ctx context.Context, in *CheckFavoriteStatusRequest, opts ...grpc.CallOption) (*CheckFavoriteStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckFavoriteStatusReply)
	err := c.cc.Invoke(ctx, House_CheckFavoriteStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HouseServer is the server API for House service.
// All implementations must embed UnimplementedHouseServer
// for forward compatibility
type HouseServer interface {
	// 普通推荐列表
	RecommendList(context.Context, *HouseRecommendRequest) (*HouseRecommendReply, error)
	// 个性化推荐列表，根据用户浏览习惯推荐
	PersonalRecommendList(context.Context, *PersonalRecommendRequest) (*HouseRecommendReply, error)
	// 预约看房
	ReserveHouse(context.Context, *ReserveHouseRequest) (*ReserveHouseReply, error)
	// 发起在线聊天
	StartChat(context.Context, *StartChatRequest) (*StartChatReply, error)
	// 收藏房源
	FavoriteHouse(context.Context, *FavoriteHouseRequest) (*FavoriteHouseReply, error)
	// 取消收藏房源
	UnfavoriteHouse(context.Context, *UnfavoriteHouseRequest) (*UnfavoriteHouseReply, error)
	// 获取收藏列表
	GetFavoriteList(context.Context, *GetFavoriteListRequest) (*GetFavoriteListReply, error)
	// 检查收藏状态
	CheckFavoriteStatus(context.Context, *CheckFavoriteStatusRequest) (*CheckFavoriteStatusReply, error)
	mustEmbedUnimplementedHouseServer()
}

// UnimplementedHouseServer must be embedded to have forward compatible implementations.
type UnimplementedHouseServer struct {
}

func (UnimplementedHouseServer) RecommendList(context.Context, *HouseRecommendRequest) (*HouseRecommendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendList not implemented")
}
func (UnimplementedHouseServer) PersonalRecommendList(context.Context, *PersonalRecommendRequest) (*HouseRecommendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonalRecommendList not implemented")
}
func (UnimplementedHouseServer) ReserveHouse(context.Context, *ReserveHouseRequest) (*ReserveHouseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveHouse not implemented")
}
func (UnimplementedHouseServer) StartChat(context.Context, *StartChatRequest) (*StartChatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartChat not implemented")
}
func (UnimplementedHouseServer) FavoriteHouse(context.Context, *FavoriteHouseRequest) (*FavoriteHouseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteHouse not implemented")
}
func (UnimplementedHouseServer) UnfavoriteHouse(context.Context, *UnfavoriteHouseRequest) (*UnfavoriteHouseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfavoriteHouse not implemented")
}
func (UnimplementedHouseServer) GetFavoriteList(context.Context, *GetFavoriteListRequest) (*GetFavoriteListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteList not implemented")
}
func (UnimplementedHouseServer) CheckFavoriteStatus(context.Context, *CheckFavoriteStatusRequest) (*CheckFavoriteStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFavoriteStatus not implemented")
}
func (UnimplementedHouseServer) mustEmbedUnimplementedHouseServer() {}

// UnsafeHouseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HouseServer will
// result in compilation errors.
type UnsafeHouseServer interface {
	mustEmbedUnimplementedHouseServer()
}

func RegisterHouseServer(s grpc.ServiceRegistrar, srv HouseServer) {
	s.RegisterService(&House_ServiceDesc, srv)
}

func _House_RecommendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HouseRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServer).RecommendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: House_RecommendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServer).RecommendList(ctx, req.(*HouseRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _House_PersonalRecommendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServer).PersonalRecommendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: House_PersonalRecommendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServer).PersonalRecommendList(ctx, req.(*PersonalRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _House_ReserveHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveHouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServer).ReserveHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: House_ReserveHouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServer).ReserveHouse(ctx, req.(*ReserveHouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _House_StartChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServer).StartChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: House_StartChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServer).StartChat(ctx, req.(*StartChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _House_FavoriteHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteHouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServer).FavoriteHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: House_FavoriteHouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServer).FavoriteHouse(ctx, req.(*FavoriteHouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _House_UnfavoriteHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfavoriteHouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServer).UnfavoriteHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: House_UnfavoriteHouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServer).UnfavoriteHouse(ctx, req.(*UnfavoriteHouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _House_GetFavoriteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoriteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServer).GetFavoriteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: House_GetFavoriteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServer).GetFavoriteList(ctx, req.(*GetFavoriteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _House_CheckFavoriteStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFavoriteStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServer).CheckFavoriteStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: House_CheckFavoriteStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServer).CheckFavoriteStatus(ctx, req.(*CheckFavoriteStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// House_ServiceDesc is the grpc.ServiceDesc for House service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var House_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.house.v3.House",
	HandlerType: (*HouseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecommendList",
			Handler:    _House_RecommendList_Handler,
		},
		{
			MethodName: "PersonalRecommendList",
			Handler:    _House_PersonalRecommendList_Handler,
		},
		{
			MethodName: "ReserveHouse",
			Handler:    _House_ReserveHouse_Handler,
		},
		{
			MethodName: "StartChat",
			Handler:    _House_StartChat_Handler,
		},
		{
			MethodName: "FavoriteHouse",
			Handler:    _House_FavoriteHouse_Handler,
		},
		{
			MethodName: "UnfavoriteHouse",
			Handler:    _House_UnfavoriteHouse_Handler,
		},
		{
			MethodName: "GetFavoriteList",
			Handler:    _House_GetFavoriteList_Handler,
		},
		{
			MethodName: "CheckFavoriteStatus",
			Handler:    _House_CheckFavoriteStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "house/v3/house.proto",
}
