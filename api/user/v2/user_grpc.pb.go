// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: api/user/v2/user.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	User_CreateUser_FullMethodName      = "/api.user.v2.User/CreateUser"
	User_Login_FullMethodName           = "/api.user.v2.User/Login"
	User_SendSms_FullMethodName         = "/api.user.v2.User/SendSms"
	User_UpdateUserInfo_FullMethodName  = "/api.user.v2.User/UpdateUserInfo"
	User_UpdateUserPws_FullMethodName   = "/api.user.v2.User/UpdateUserPws"
	User_FaceCertify_FullMethodName     = "/api.user.v2.User/FaceCertify"
	User_CertifyNotify_FullMethodName   = "/api.user.v2.User/CertifyNotify"
	User_QueryCertify_FullMethodName    = "/api.user.v2.User/QueryCertify"
	User_ResetPassword_FullMethodName   = "/api.user.v2.User/ResetPassword"
	User_FreezeAccount_FullMethodName   = "/api.user.v2.User/FreezeAccount"
	User_UnfreezeAccount_FullMethodName = "/api.user.v2.User/UnfreezeAccount"
	User_GetLoginLogs_FullMethodName    = "/api.user.v2.User/GetLoginLogs"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserReply, error)
	// todo 登录/注册
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	// todo 短信验证码
	SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsReply, error)
	// todo 用户个人信息修改
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoReply, error)
	// todo 用户密码修改
	UpdateUserPws(ctx context.Context, in *UpdateUserPwsRequest, opts ...grpc.CallOption) (*UpdateUserPwsReply, error)
	// todo 支付宝人脸识别实名认证初始化
	FaceCertify(ctx context.Context, in *FaceCertifyRequest, opts ...grpc.CallOption) (*FaceCertifyReply, error)
	// todo 支付宝实名认证回调
	CertifyNotify(ctx context.Context, in *CertifyNotifyRequest, opts ...grpc.CallOption) (*CertifyNotifyReply, error)
	// todo 查询实名认证结果
	QueryCertify(ctx context.Context, in *QueryCertifyRequest, opts ...grpc.CallOption) (*QueryCertifyReply, error)
	// todo 密码重置
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordReply, error)
	// todo 账号冻结
	FreezeAccount(ctx context.Context, in *FreezeAccountRequest, opts ...grpc.CallOption) (*FreezeAccountReply, error)
	// todo 账号解冻
	UnfreezeAccount(ctx context.Context, in *UnfreezeAccountRequest, opts ...grpc.CallOption) (*UnfreezeAccountReply, error)
	// todo 获取登录日志
	GetLoginLogs(ctx context.Context, in *GetLoginLogsRequest, opts ...grpc.CallOption) (*GetLoginLogsReply, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserReply)
	err := c.cc.Invoke(ctx, User_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, User_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSmsReply)
	err := c.cc.Invoke(ctx, User_SendSms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserInfoReply)
	err := c.cc.Invoke(ctx, User_UpdateUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserPws(ctx context.Context, in *UpdateUserPwsRequest, opts ...grpc.CallOption) (*UpdateUserPwsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserPwsReply)
	err := c.cc.Invoke(ctx, User_UpdateUserPws_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FaceCertify(ctx context.Context, in *FaceCertifyRequest, opts ...grpc.CallOption) (*FaceCertifyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FaceCertifyReply)
	err := c.cc.Invoke(ctx, User_FaceCertify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CertifyNotify(ctx context.Context, in *CertifyNotifyRequest, opts ...grpc.CallOption) (*CertifyNotifyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CertifyNotifyReply)
	err := c.cc.Invoke(ctx, User_CertifyNotify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryCertify(ctx context.Context, in *QueryCertifyRequest, opts ...grpc.CallOption) (*QueryCertifyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCertifyReply)
	err := c.cc.Invoke(ctx, User_QueryCertify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPasswordReply)
	err := c.cc.Invoke(ctx, User_ResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FreezeAccount(ctx context.Context, in *FreezeAccountRequest, opts ...grpc.CallOption) (*FreezeAccountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FreezeAccountReply)
	err := c.cc.Invoke(ctx, User_FreezeAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UnfreezeAccount(ctx context.Context, in *UnfreezeAccountRequest, opts ...grpc.CallOption) (*UnfreezeAccountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnfreezeAccountReply)
	err := c.cc.Invoke(ctx, User_UnfreezeAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetLoginLogs(ctx context.Context, in *GetLoginLogsRequest, opts ...grpc.CallOption) (*GetLoginLogsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLoginLogsReply)
	err := c.cc.Invoke(ctx, User_GetLoginLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility.
type UserServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error)
	// todo 登录/注册
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	// todo 短信验证码
	SendSms(context.Context, *SendSmsRequest) (*SendSmsReply, error)
	// todo 用户个人信息修改
	UpdateUserInfo(context.Context, *UpdateUserInfoRequest) (*UpdateUserInfoReply, error)
	// todo 用户密码修改
	UpdateUserPws(context.Context, *UpdateUserPwsRequest) (*UpdateUserPwsReply, error)
	// todo 支付宝人脸识别实名认证初始化
	FaceCertify(context.Context, *FaceCertifyRequest) (*FaceCertifyReply, error)
	// todo 支付宝实名认证回调
	CertifyNotify(context.Context, *CertifyNotifyRequest) (*CertifyNotifyReply, error)
	// todo 查询实名认证结果
	QueryCertify(context.Context, *QueryCertifyRequest) (*QueryCertifyReply, error)
	// todo 密码重置
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordReply, error)
	// todo 账号冻结
	FreezeAccount(context.Context, *FreezeAccountRequest) (*FreezeAccountReply, error)
	// todo 账号解冻
	UnfreezeAccount(context.Context, *UnfreezeAccountRequest) (*UnfreezeAccountReply, error)
	// todo 获取登录日志
	GetLoginLogs(context.Context, *GetLoginLogsRequest) (*GetLoginLogsReply, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServer struct{}

func (UnimplementedUserServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) SendSms(context.Context, *SendSmsRequest) (*SendSmsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedUserServer) UpdateUserInfo(context.Context, *UpdateUserInfoRequest) (*UpdateUserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUserServer) UpdateUserPws(context.Context, *UpdateUserPwsRequest) (*UpdateUserPwsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPws not implemented")
}
func (UnimplementedUserServer) FaceCertify(context.Context, *FaceCertifyRequest) (*FaceCertifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FaceCertify not implemented")
}
func (UnimplementedUserServer) CertifyNotify(context.Context, *CertifyNotifyRequest) (*CertifyNotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertifyNotify not implemented")
}
func (UnimplementedUserServer) QueryCertify(context.Context, *QueryCertifyRequest) (*QueryCertifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCertify not implemented")
}
func (UnimplementedUserServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedUserServer) FreezeAccount(context.Context, *FreezeAccountRequest) (*FreezeAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeAccount not implemented")
}
func (UnimplementedUserServer) UnfreezeAccount(context.Context, *UnfreezeAccountRequest) (*UnfreezeAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfreezeAccount not implemented")
}
func (UnimplementedUserServer) GetLoginLogs(context.Context, *GetLoginLogsRequest) (*GetLoginLogsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginLogs not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}
func (UnimplementedUserServer) testEmbeddedByValue()              {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	// If the following call pancis, it indicates UnimplementedUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SendSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SendSms(ctx, req.(*SendSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserPws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPwsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserPws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateUserPws_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserPws(ctx, req.(*UpdateUserPwsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FaceCertify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaceCertifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FaceCertify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FaceCertify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FaceCertify(ctx, req.(*FaceCertifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CertifyNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertifyNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CertifyNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CertifyNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CertifyNotify(ctx, req.(*CertifyNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_QueryCertify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCertifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).QueryCertify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_QueryCertify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).QueryCertify(ctx, req.(*QueryCertifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FreezeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreezeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FreezeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FreezeAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FreezeAccount(ctx, req.(*FreezeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UnfreezeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfreezeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UnfreezeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UnfreezeAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UnfreezeAccount(ctx, req.(*UnfreezeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetLoginLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetLoginLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetLoginLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetLoginLogs(ctx, req.(*GetLoginLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.v2.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "SendSms",
			Handler:    _User_SendSms_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _User_UpdateUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserPws",
			Handler:    _User_UpdateUserPws_Handler,
		},
		{
			MethodName: "FaceCertify",
			Handler:    _User_FaceCertify_Handler,
		},
		{
			MethodName: "CertifyNotify",
			Handler:    _User_CertifyNotify_Handler,
		},
		{
			MethodName: "QueryCertify",
			Handler:    _User_QueryCertify_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _User_ResetPassword_Handler,
		},
		{
			MethodName: "FreezeAccount",
			Handler:    _User_FreezeAccount_Handler,
		},
		{
			MethodName: "UnfreezeAccount",
			Handler:    _User_UnfreezeAccount_Handler,
		},
		{
			MethodName: "GetLoginLogs",
			Handler:    _User_GetLoginLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/v2/user.proto",
}
