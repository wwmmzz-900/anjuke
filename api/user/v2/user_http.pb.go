// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: user/v2/user.proto

package v2

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserCreateUser = "/api.user.v2.User/CreateUser"

type UserHTTPServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.POST("/user/create", _User_CreateUser0_HTTP_Handler(srv))
}

func _User_CreateUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserCreateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUserReply)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	CreateUser(ctx context.Context, req *CreateUserRequest, opts ...http.CallOption) (rsp *CreateUserReply, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...http.CallOption) (*CreateUserReply, error) {
	var out CreateUserReply
	pattern := "/user/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserCreateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationBloggerProfileGetBloggerHouses = "/api.user.v2.BloggerProfile/GetBloggerHouses"
const OperationBloggerProfileGetBloggerProfile = "/api.user.v2.BloggerProfile/GetBloggerProfile"

type BloggerProfileHTTPServer interface {
	GetBloggerHouses(context.Context, *GetBloggerHousesRequest) (*GetBloggerHousesResponse, error)
	GetBloggerProfile(context.Context, *GetBloggerProfileRequest) (*GetBloggerProfileResponse, error)
}

func RegisterBloggerProfileHTTPServer(s *http.Server, srv BloggerProfileHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v2/blogger/profile", _BloggerProfile_GetBloggerProfile0_HTTP_Handler(srv))
	r.GET("/api/v2/blogger/houses", _BloggerProfile_GetBloggerHouses0_HTTP_Handler(srv))
}

func _BloggerProfile_GetBloggerProfile0_HTTP_Handler(srv BloggerProfileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBloggerProfileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBloggerProfileGetBloggerProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBloggerProfile(ctx, req.(*GetBloggerProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBloggerProfileResponse)
		return ctx.Result(200, reply)
	}
}

func _BloggerProfile_GetBloggerHouses0_HTTP_Handler(srv BloggerProfileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBloggerHousesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBloggerProfileGetBloggerHouses)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBloggerHouses(ctx, req.(*GetBloggerHousesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBloggerHousesResponse)
		return ctx.Result(200, reply)
	}
}

type BloggerProfileHTTPClient interface {
	GetBloggerHouses(ctx context.Context, req *GetBloggerHousesRequest, opts ...http.CallOption) (rsp *GetBloggerHousesResponse, err error)
	GetBloggerProfile(ctx context.Context, req *GetBloggerProfileRequest, opts ...http.CallOption) (rsp *GetBloggerProfileResponse, err error)
}

type BloggerProfileHTTPClientImpl struct {
	cc *http.Client
}

func NewBloggerProfileHTTPClient(client *http.Client) BloggerProfileHTTPClient {
	return &BloggerProfileHTTPClientImpl{client}
}

func (c *BloggerProfileHTTPClientImpl) GetBloggerHouses(ctx context.Context, in *GetBloggerHousesRequest, opts ...http.CallOption) (*GetBloggerHousesResponse, error) {
	var out GetBloggerHousesResponse
	pattern := "/api/v2/blogger/houses"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBloggerProfileGetBloggerHouses))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BloggerProfileHTTPClientImpl) GetBloggerProfile(ctx context.Context, in *GetBloggerProfileRequest, opts ...http.CallOption) (*GetBloggerProfileResponse, error) {
	var out GetBloggerProfileResponse
	pattern := "/api/v2/blogger/profile"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBloggerProfileGetBloggerProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
