// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: api/blacklist/v1/blacklist.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Blacklist_AddToBlacklist_FullMethodName      = "/api.blacklist.v1.Blacklist/AddToBlacklist"
	Blacklist_RemoveFromBlacklist_FullMethodName = "/api.blacklist.v1.Blacklist/RemoveFromBlacklist"
	Blacklist_CheckBlacklist_FullMethodName      = "/api.blacklist.v1.Blacklist/CheckBlacklist"
	Blacklist_GetBlacklistList_FullMethodName    = "/api.blacklist.v1.Blacklist/GetBlacklistList"
)

// BlacklistClient is the client API for Blacklist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlacklistClient interface {
	// 添加用户到黑名单
	AddToBlacklist(ctx context.Context, in *AddToBlacklistRequest, opts ...grpc.CallOption) (*AddToBlacklistReply, error)
	// 从黑名单移除用户
	RemoveFromBlacklist(ctx context.Context, in *RemoveFromBlacklistRequest, opts ...grpc.CallOption) (*RemoveFromBlacklistReply, error)
	// 检查用户是否在黑名单中
	CheckBlacklist(ctx context.Context, in *CheckBlacklistRequest, opts ...grpc.CallOption) (*CheckBlacklistReply, error)
	// 获取黑名单列表
	GetBlacklistList(ctx context.Context, in *GetBlacklistListRequest, opts ...grpc.CallOption) (*GetBlacklistListReply, error)
}

type blacklistClient struct {
	cc grpc.ClientConnInterface
}

func NewBlacklistClient(cc grpc.ClientConnInterface) BlacklistClient {
	return &blacklistClient{cc}
}

func (c *blacklistClient) AddToBlacklist(ctx context.Context, in *AddToBlacklistRequest, opts ...grpc.CallOption) (*AddToBlacklistReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToBlacklistReply)
	err := c.cc.Invoke(ctx, Blacklist_AddToBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blacklistClient) RemoveFromBlacklist(ctx context.Context, in *RemoveFromBlacklistRequest, opts ...grpc.CallOption) (*RemoveFromBlacklistReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromBlacklistReply)
	err := c.cc.Invoke(ctx, Blacklist_RemoveFromBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blacklistClient) CheckBlacklist(ctx context.Context, in *CheckBlacklistRequest, opts ...grpc.CallOption) (*CheckBlacklistReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckBlacklistReply)
	err := c.cc.Invoke(ctx, Blacklist_CheckBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blacklistClient) GetBlacklistList(ctx context.Context, in *GetBlacklistListRequest, opts ...grpc.CallOption) (*GetBlacklistListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlacklistListReply)
	err := c.cc.Invoke(ctx, Blacklist_GetBlacklistList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlacklistServer is the server API for Blacklist service.
// All implementations must embed UnimplementedBlacklistServer
// for forward compatibility
type BlacklistServer interface {
	// 添加用户到黑名单
	AddToBlacklist(context.Context, *AddToBlacklistRequest) (*AddToBlacklistReply, error)
	// 从黑名单移除用户
	RemoveFromBlacklist(context.Context, *RemoveFromBlacklistRequest) (*RemoveFromBlacklistReply, error)
	// 检查用户是否在黑名单中
	CheckBlacklist(context.Context, *CheckBlacklistRequest) (*CheckBlacklistReply, error)
	// 获取黑名单列表
	GetBlacklistList(context.Context, *GetBlacklistListRequest) (*GetBlacklistListReply, error)
	mustEmbedUnimplementedBlacklistServer()
}

// UnimplementedBlacklistServer must be embedded to have forward compatible implementations.
type UnimplementedBlacklistServer struct {
}

func (UnimplementedBlacklistServer) AddToBlacklist(context.Context, *AddToBlacklistRequest) (*AddToBlacklistReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlacklist not implemented")
}
func (UnimplementedBlacklistServer) RemoveFromBlacklist(context.Context, *RemoveFromBlacklistRequest) (*RemoveFromBlacklistReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromBlacklist not implemented")
}
func (UnimplementedBlacklistServer) CheckBlacklist(context.Context, *CheckBlacklistRequest) (*CheckBlacklistReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBlacklist not implemented")
}
func (UnimplementedBlacklistServer) GetBlacklistList(context.Context, *GetBlacklistListRequest) (*GetBlacklistListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlacklistList not implemented")
}
func (UnimplementedBlacklistServer) mustEmbedUnimplementedBlacklistServer() {}

// UnsafeBlacklistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlacklistServer will
// result in compilation errors.
type UnsafeBlacklistServer interface {
	mustEmbedUnimplementedBlacklistServer()
}

func RegisterBlacklistServer(s grpc.ServiceRegistrar, srv BlacklistServer) {
	s.RegisterService(&Blacklist_ServiceDesc, srv)
}

func _Blacklist_AddToBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlacklistServer).AddToBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blacklist_AddToBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlacklistServer).AddToBlacklist(ctx, req.(*AddToBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blacklist_RemoveFromBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlacklistServer).RemoveFromBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blacklist_RemoveFromBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlacklistServer).RemoveFromBlacklist(ctx, req.(*RemoveFromBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blacklist_CheckBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlacklistServer).CheckBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blacklist_CheckBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlacklistServer).CheckBlacklist(ctx, req.(*CheckBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blacklist_GetBlacklistList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlacklistListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlacklistServer).GetBlacklistList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blacklist_GetBlacklistList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlacklistServer).GetBlacklistList(ctx, req.(*GetBlacklistListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Blacklist_ServiceDesc is the grpc.ServiceDesc for Blacklist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blacklist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.blacklist.v1.Blacklist",
	HandlerType: (*BlacklistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToBlacklist",
			Handler:    _Blacklist_AddToBlacklist_Handler,
		},
		{
			MethodName: "RemoveFromBlacklist",
			Handler:    _Blacklist_RemoveFromBlacklist_Handler,
		},
		{
			MethodName: "CheckBlacklist",
			Handler:    _Blacklist_CheckBlacklist_Handler,
		},
		{
			MethodName: "GetBlacklistList",
			Handler:    _Blacklist_GetBlacklistList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/blacklist/v1/blacklist.proto",
}
