// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: api/blacklist/v1/blacklist.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBlacklistAddToBlacklist = "/api.blacklist.v1.Blacklist/AddToBlacklist"
const OperationBlacklistCheckBlacklist = "/api.blacklist.v1.Blacklist/CheckBlacklist"
const OperationBlacklistGetBlacklistList = "/api.blacklist.v1.Blacklist/GetBlacklistList"
const OperationBlacklistRemoveFromBlacklist = "/api.blacklist.v1.Blacklist/RemoveFromBlacklist"

type BlacklistHTTPServer interface {
	// AddToBlacklist 添加用户到黑名单
	AddToBlacklist(context.Context, *AddToBlacklistRequest) (*AddToBlacklistReply, error)
	// CheckBlacklist 检查用户是否在黑名单中
	CheckBlacklist(context.Context, *CheckBlacklistRequest) (*CheckBlacklistReply, error)
	// GetBlacklistList 获取黑名单列表
	GetBlacklistList(context.Context, *GetBlacklistListRequest) (*GetBlacklistListReply, error)
	// RemoveFromBlacklist 从黑名单移除用户
	RemoveFromBlacklist(context.Context, *RemoveFromBlacklistRequest) (*RemoveFromBlacklistReply, error)
}

func RegisterBlacklistHTTPServer(s *http.Server, srv BlacklistHTTPServer) {
	r := s.Route("/")
	r.POST("/blacklist/add", _Blacklist_AddToBlacklist0_HTTP_Handler(srv))
	r.DELETE("/blacklist/{user_id}", _Blacklist_RemoveFromBlacklist0_HTTP_Handler(srv))
	r.GET("/blacklist/check/{user_id}", _Blacklist_CheckBlacklist0_HTTP_Handler(srv))
	r.GET("/blacklist/list", _Blacklist_GetBlacklistList0_HTTP_Handler(srv))
}

func _Blacklist_AddToBlacklist0_HTTP_Handler(srv BlacklistHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddToBlacklistRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlacklistAddToBlacklist)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddToBlacklist(ctx, req.(*AddToBlacklistRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddToBlacklistReply)
		return ctx.Result(200, reply)
	}
}

func _Blacklist_RemoveFromBlacklist0_HTTP_Handler(srv BlacklistHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemoveFromBlacklistRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlacklistRemoveFromBlacklist)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveFromBlacklist(ctx, req.(*RemoveFromBlacklistRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RemoveFromBlacklistReply)
		return ctx.Result(200, reply)
	}
}

func _Blacklist_CheckBlacklist0_HTTP_Handler(srv BlacklistHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckBlacklistRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlacklistCheckBlacklist)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckBlacklist(ctx, req.(*CheckBlacklistRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckBlacklistReply)
		return ctx.Result(200, reply)
	}
}

func _Blacklist_GetBlacklistList0_HTTP_Handler(srv BlacklistHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBlacklistListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlacklistGetBlacklistList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBlacklistList(ctx, req.(*GetBlacklistListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBlacklistListReply)
		return ctx.Result(200, reply)
	}
}

type BlacklistHTTPClient interface {
	AddToBlacklist(ctx context.Context, req *AddToBlacklistRequest, opts ...http.CallOption) (rsp *AddToBlacklistReply, err error)
	CheckBlacklist(ctx context.Context, req *CheckBlacklistRequest, opts ...http.CallOption) (rsp *CheckBlacklistReply, err error)
	GetBlacklistList(ctx context.Context, req *GetBlacklistListRequest, opts ...http.CallOption) (rsp *GetBlacklistListReply, err error)
	RemoveFromBlacklist(ctx context.Context, req *RemoveFromBlacklistRequest, opts ...http.CallOption) (rsp *RemoveFromBlacklistReply, err error)
}

type BlacklistHTTPClientImpl struct {
	cc *http.Client
}

func NewBlacklistHTTPClient(client *http.Client) BlacklistHTTPClient {
	return &BlacklistHTTPClientImpl{client}
}

func (c *BlacklistHTTPClientImpl) AddToBlacklist(ctx context.Context, in *AddToBlacklistRequest, opts ...http.CallOption) (*AddToBlacklistReply, error) {
	var out AddToBlacklistReply
	pattern := "/blacklist/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlacklistAddToBlacklist))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlacklistHTTPClientImpl) CheckBlacklist(ctx context.Context, in *CheckBlacklistRequest, opts ...http.CallOption) (*CheckBlacklistReply, error) {
	var out CheckBlacklistReply
	pattern := "/blacklist/check/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlacklistCheckBlacklist))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlacklistHTTPClientImpl) GetBlacklistList(ctx context.Context, in *GetBlacklistListRequest, opts ...http.CallOption) (*GetBlacklistListReply, error) {
	var out GetBlacklistListReply
	pattern := "/blacklist/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlacklistGetBlacklistList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlacklistHTTPClientImpl) RemoveFromBlacklist(ctx context.Context, in *RemoveFromBlacklistRequest, opts ...http.CallOption) (*RemoveFromBlacklistReply, error) {
	var out RemoveFromBlacklistReply
	pattern := "/blacklist/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlacklistRemoveFromBlacklist))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
