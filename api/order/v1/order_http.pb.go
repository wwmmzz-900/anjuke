// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: api/order/v1/order.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOrderCancelOrder = "/api.order.v1.Order/CancelOrder"
const OperationOrderCreateOrder = "/api.order.v1.Order/CreateOrder"
const OperationOrderGetOrderDetail = "/api.order.v1.Order/GetOrderDetail"
const OperationOrderGetOrderList = "/api.order.v1.Order/GetOrderList"
const OperationOrderGetTenantOrderList = "/api.order.v1.Order/GetTenantOrderList"

type OrderHTTPServer interface {
	// CancelOrder 取消订单
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderReply, error)
	// CreateOrder 创建订单
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderReply, error)
	// GetOrderDetail 获取订单详情
	GetOrderDetail(context.Context, *GetOrderDetailRequest) (*GetOrderDetailReply, error)
	// GetOrderList 订单列表
	GetOrderList(context.Context, *GetOrderListRequest) (*GetOrderListReply, error)
	// GetTenantOrderList 获取租客订单列表(完成)
	GetTenantOrderList(context.Context, *GetTenantOrderListRequest) (*GetTenantOrderListReply, error)
}

func RegisterOrderHTTPServer(s *http.Server, srv OrderHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/orders/tenant/{tenant_id}", _Order_GetTenantOrderList0_HTTP_Handler(srv))
	r.GET("/api/v1/orders/{id}", _Order_GetOrderDetail0_HTTP_Handler(srv))
	r.GET("/api/v1/orders", _Order_GetOrderList0_HTTP_Handler(srv))
	r.POST("/api/v1/orders", _Order_CreateOrder0_HTTP_Handler(srv))
	r.PUT("/api/v1/orders/{id}/cancel", _Order_CancelOrder0_HTTP_Handler(srv))
}

func _Order_GetTenantOrderList0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTenantOrderListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderGetTenantOrderList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTenantOrderList(ctx, req.(*GetTenantOrderListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTenantOrderListReply)
		return ctx.Result(200, reply)
	}
}

func _Order_GetOrderDetail0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOrderDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderGetOrderDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrderDetail(ctx, req.(*GetOrderDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOrderDetailReply)
		return ctx.Result(200, reply)
	}
}

func _Order_GetOrderList0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOrderListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderGetOrderList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrderList(ctx, req.(*GetOrderListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOrderListReply)
		return ctx.Result(200, reply)
	}
}

func _Order_CreateOrder0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderCreateOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrder(ctx, req.(*CreateOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrderReply)
		return ctx.Result(200, reply)
	}
}

func _Order_CancelOrder0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderCancelOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelOrder(ctx, req.(*CancelOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CancelOrderReply)
		return ctx.Result(200, reply)
	}
}

type OrderHTTPClient interface {
	CancelOrder(ctx context.Context, req *CancelOrderRequest, opts ...http.CallOption) (rsp *CancelOrderReply, err error)
	CreateOrder(ctx context.Context, req *CreateOrderRequest, opts ...http.CallOption) (rsp *CreateOrderReply, err error)
	GetOrderDetail(ctx context.Context, req *GetOrderDetailRequest, opts ...http.CallOption) (rsp *GetOrderDetailReply, err error)
	GetOrderList(ctx context.Context, req *GetOrderListRequest, opts ...http.CallOption) (rsp *GetOrderListReply, err error)
	GetTenantOrderList(ctx context.Context, req *GetTenantOrderListRequest, opts ...http.CallOption) (rsp *GetTenantOrderListReply, err error)
}

type OrderHTTPClientImpl struct {
	cc *http.Client
}

func NewOrderHTTPClient(client *http.Client) OrderHTTPClient {
	return &OrderHTTPClientImpl{client}
}

func (c *OrderHTTPClientImpl) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...http.CallOption) (*CancelOrderReply, error) {
	var out CancelOrderReply
	pattern := "/api/v1/orders/{id}/cancel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderCancelOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...http.CallOption) (*CreateOrderReply, error) {
	var out CreateOrderReply
	pattern := "/api/v1/orders"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderCreateOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) GetOrderDetail(ctx context.Context, in *GetOrderDetailRequest, opts ...http.CallOption) (*GetOrderDetailReply, error) {
	var out GetOrderDetailReply
	pattern := "/api/v1/orders/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderGetOrderDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) GetOrderList(ctx context.Context, in *GetOrderListRequest, opts ...http.CallOption) (*GetOrderListReply, error) {
	var out GetOrderListReply
	pattern := "/api/v1/orders"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderGetOrderList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderHTTPClientImpl) GetTenantOrderList(ctx context.Context, in *GetTenantOrderListRequest, opts ...http.CallOption) (*GetTenantOrderListReply, error) {
	var out GetTenantOrderListReply
	pattern := "/api/v1/orders/tenant/{tenant_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderGetTenantOrderList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
