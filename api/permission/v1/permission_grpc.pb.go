// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: api/permission/v1/permission.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Permission_UpdateUserPermission_FullMethodName      = "/api.permission.v1.Permission/UpdateUserPermission"
	Permission_GetUserPermission_FullMethodName         = "/api.permission.v1.Permission/GetUserPermission"
	Permission_BatchUpdateUserPermission_FullMethodName = "/api.permission.v1.Permission/BatchUpdateUserPermission"
	Permission_GetPermissionList_FullMethodName         = "/api.permission.v1.Permission/GetPermissionList"
	Permission_GetRolePermissions_FullMethodName        = "/api.permission.v1.Permission/GetRolePermissions"
)

// PermissionClient is the client API for Permission service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionClient interface {
	// 修改用户权限
	UpdateUserPermission(ctx context.Context, in *UpdateUserPermissionRequest, opts ...grpc.CallOption) (*UpdateUserPermissionReply, error)
	// 获取用户权限
	GetUserPermission(ctx context.Context, in *GetUserPermissionRequest, opts ...grpc.CallOption) (*GetUserPermissionReply, error)
	// 批量修改用户权限
	BatchUpdateUserPermission(ctx context.Context, in *BatchUpdateUserPermissionRequest, opts ...grpc.CallOption) (*BatchUpdateUserPermissionReply, error)
	// 获取所有权限列表
	GetPermissionList(ctx context.Context, in *GetPermissionListRequest, opts ...grpc.CallOption) (*GetPermissionListReply, error)
	// 获取角色权限
	GetRolePermissions(ctx context.Context, in *GetRolePermissionsRequest, opts ...grpc.CallOption) (*GetRolePermissionsReply, error)
}

type permissionClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionClient(cc grpc.ClientConnInterface) PermissionClient {
	return &permissionClient{cc}
}

func (c *permissionClient) UpdateUserPermission(ctx context.Context, in *UpdateUserPermissionRequest, opts ...grpc.CallOption) (*UpdateUserPermissionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserPermissionReply)
	err := c.cc.Invoke(ctx, Permission_UpdateUserPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) GetUserPermission(ctx context.Context, in *GetUserPermissionRequest, opts ...grpc.CallOption) (*GetUserPermissionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPermissionReply)
	err := c.cc.Invoke(ctx, Permission_GetUserPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) BatchUpdateUserPermission(ctx context.Context, in *BatchUpdateUserPermissionRequest, opts ...grpc.CallOption) (*BatchUpdateUserPermissionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchUpdateUserPermissionReply)
	err := c.cc.Invoke(ctx, Permission_BatchUpdateUserPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) GetPermissionList(ctx context.Context, in *GetPermissionListRequest, opts ...grpc.CallOption) (*GetPermissionListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPermissionListReply)
	err := c.cc.Invoke(ctx, Permission_GetPermissionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) GetRolePermissions(ctx context.Context, in *GetRolePermissionsRequest, opts ...grpc.CallOption) (*GetRolePermissionsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRolePermissionsReply)
	err := c.cc.Invoke(ctx, Permission_GetRolePermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionServer is the server API for Permission service.
// All implementations must embed UnimplementedPermissionServer
// for forward compatibility
type PermissionServer interface {
	// 修改用户权限
	UpdateUserPermission(context.Context, *UpdateUserPermissionRequest) (*UpdateUserPermissionReply, error)
	// 获取用户权限
	GetUserPermission(context.Context, *GetUserPermissionRequest) (*GetUserPermissionReply, error)
	// 批量修改用户权限
	BatchUpdateUserPermission(context.Context, *BatchUpdateUserPermissionRequest) (*BatchUpdateUserPermissionReply, error)
	// 获取所有权限列表
	GetPermissionList(context.Context, *GetPermissionListRequest) (*GetPermissionListReply, error)
	// 获取角色权限
	GetRolePermissions(context.Context, *GetRolePermissionsRequest) (*GetRolePermissionsReply, error)
	mustEmbedUnimplementedPermissionServer()
}

// UnimplementedPermissionServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionServer struct {
}

func (UnimplementedPermissionServer) UpdateUserPermission(context.Context, *UpdateUserPermissionRequest) (*UpdateUserPermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPermission not implemented")
}
func (UnimplementedPermissionServer) GetUserPermission(context.Context, *GetUserPermissionRequest) (*GetUserPermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermission not implemented")
}
func (UnimplementedPermissionServer) BatchUpdateUserPermission(context.Context, *BatchUpdateUserPermissionRequest) (*BatchUpdateUserPermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateUserPermission not implemented")
}
func (UnimplementedPermissionServer) GetPermissionList(context.Context, *GetPermissionListRequest) (*GetPermissionListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionList not implemented")
}
func (UnimplementedPermissionServer) GetRolePermissions(context.Context, *GetRolePermissionsRequest) (*GetRolePermissionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolePermissions not implemented")
}
func (UnimplementedPermissionServer) mustEmbedUnimplementedPermissionServer() {}

// UnsafePermissionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionServer will
// result in compilation errors.
type UnsafePermissionServer interface {
	mustEmbedUnimplementedPermissionServer()
}

func RegisterPermissionServer(s grpc.ServiceRegistrar, srv PermissionServer) {
	s.RegisterService(&Permission_ServiceDesc, srv)
}

func _Permission_UpdateUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).UpdateUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permission_UpdateUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).UpdateUserPermission(ctx, req.(*UpdateUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_GetUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).GetUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permission_GetUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).GetUserPermission(ctx, req.(*GetUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_BatchUpdateUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).BatchUpdateUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permission_BatchUpdateUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).BatchUpdateUserPermission(ctx, req.(*BatchUpdateUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_GetPermissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).GetPermissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permission_GetPermissionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).GetPermissionList(ctx, req.(*GetPermissionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_GetRolePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).GetRolePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permission_GetRolePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).GetRolePermissions(ctx, req.(*GetRolePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Permission_ServiceDesc is the grpc.ServiceDesc for Permission service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Permission_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.permission.v1.Permission",
	HandlerType: (*PermissionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserPermission",
			Handler:    _Permission_UpdateUserPermission_Handler,
		},
		{
			MethodName: "GetUserPermission",
			Handler:    _Permission_GetUserPermission_Handler,
		},
		{
			MethodName: "BatchUpdateUserPermission",
			Handler:    _Permission_BatchUpdateUserPermission_Handler,
		},
		{
			MethodName: "GetPermissionList",
			Handler:    _Permission_GetPermissionList_Handler,
		},
		{
			MethodName: "GetRolePermissions",
			Handler:    _Permission_GetRolePermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/permission/v1/permission.proto",
}
