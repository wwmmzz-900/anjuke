// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: api/permission/v1/permission.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPermissionBatchUpdateUserPermission = "/api.permission.v1.Permission/BatchUpdateUserPermission"
const OperationPermissionGetPermissionList = "/api.permission.v1.Permission/GetPermissionList"
const OperationPermissionGetRolePermissions = "/api.permission.v1.Permission/GetRolePermissions"
const OperationPermissionGetUserPermission = "/api.permission.v1.Permission/GetUserPermission"
const OperationPermissionUpdateUserPermission = "/api.permission.v1.Permission/UpdateUserPermission"

type PermissionHTTPServer interface {
	// BatchUpdateUserPermission 批量修改用户权限
	BatchUpdateUserPermission(context.Context, *BatchUpdateUserPermissionRequest) (*BatchUpdateUserPermissionReply, error)
	// GetPermissionList 获取所有权限列表
	GetPermissionList(context.Context, *GetPermissionListRequest) (*GetPermissionListReply, error)
	// GetRolePermissions 获取角色权限
	GetRolePermissions(context.Context, *GetRolePermissionsRequest) (*GetRolePermissionsReply, error)
	// GetUserPermission 获取用户权限
	GetUserPermission(context.Context, *GetUserPermissionRequest) (*GetUserPermissionReply, error)
	// UpdateUserPermission 修改用户权限
	UpdateUserPermission(context.Context, *UpdateUserPermissionRequest) (*UpdateUserPermissionReply, error)
}

func RegisterPermissionHTTPServer(s *http.Server, srv PermissionHTTPServer) {
	r := s.Route("/")
	r.PUT("/permission/user/{user_id}", _Permission_UpdateUserPermission0_HTTP_Handler(srv))
	r.GET("/permission/user/{user_id}", _Permission_GetUserPermission0_HTTP_Handler(srv))
	r.PUT("/permission/batch", _Permission_BatchUpdateUserPermission0_HTTP_Handler(srv))
	r.GET("/permission/list", _Permission_GetPermissionList0_HTTP_Handler(srv))
	r.GET("/permission/role/{role_id}", _Permission_GetRolePermissions0_HTTP_Handler(srv))
}

func _Permission_UpdateUserPermission0_HTTP_Handler(srv PermissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserPermissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermissionUpdateUserPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserPermission(ctx, req.(*UpdateUserPermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserPermissionReply)
		return ctx.Result(200, reply)
	}
}

func _Permission_GetUserPermission0_HTTP_Handler(srv PermissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserPermissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermissionGetUserPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserPermission(ctx, req.(*GetUserPermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserPermissionReply)
		return ctx.Result(200, reply)
	}
}

func _Permission_BatchUpdateUserPermission0_HTTP_Handler(srv PermissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchUpdateUserPermissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermissionBatchUpdateUserPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchUpdateUserPermission(ctx, req.(*BatchUpdateUserPermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchUpdateUserPermissionReply)
		return ctx.Result(200, reply)
	}
}

func _Permission_GetPermissionList0_HTTP_Handler(srv PermissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPermissionListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermissionGetPermissionList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPermissionList(ctx, req.(*GetPermissionListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPermissionListReply)
		return ctx.Result(200, reply)
	}
}

func _Permission_GetRolePermissions0_HTTP_Handler(srv PermissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRolePermissionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermissionGetRolePermissions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRolePermissions(ctx, req.(*GetRolePermissionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRolePermissionsReply)
		return ctx.Result(200, reply)
	}
}

type PermissionHTTPClient interface {
	BatchUpdateUserPermission(ctx context.Context, req *BatchUpdateUserPermissionRequest, opts ...http.CallOption) (rsp *BatchUpdateUserPermissionReply, err error)
	GetPermissionList(ctx context.Context, req *GetPermissionListRequest, opts ...http.CallOption) (rsp *GetPermissionListReply, err error)
	GetRolePermissions(ctx context.Context, req *GetRolePermissionsRequest, opts ...http.CallOption) (rsp *GetRolePermissionsReply, err error)
	GetUserPermission(ctx context.Context, req *GetUserPermissionRequest, opts ...http.CallOption) (rsp *GetUserPermissionReply, err error)
	UpdateUserPermission(ctx context.Context, req *UpdateUserPermissionRequest, opts ...http.CallOption) (rsp *UpdateUserPermissionReply, err error)
}

type PermissionHTTPClientImpl struct {
	cc *http.Client
}

func NewPermissionHTTPClient(client *http.Client) PermissionHTTPClient {
	return &PermissionHTTPClientImpl{client}
}

func (c *PermissionHTTPClientImpl) BatchUpdateUserPermission(ctx context.Context, in *BatchUpdateUserPermissionRequest, opts ...http.CallOption) (*BatchUpdateUserPermissionReply, error) {
	var out BatchUpdateUserPermissionReply
	pattern := "/permission/batch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPermissionBatchUpdateUserPermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PermissionHTTPClientImpl) GetPermissionList(ctx context.Context, in *GetPermissionListRequest, opts ...http.CallOption) (*GetPermissionListReply, error) {
	var out GetPermissionListReply
	pattern := "/permission/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPermissionGetPermissionList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PermissionHTTPClientImpl) GetRolePermissions(ctx context.Context, in *GetRolePermissionsRequest, opts ...http.CallOption) (*GetRolePermissionsReply, error) {
	var out GetRolePermissionsReply
	pattern := "/permission/role/{role_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPermissionGetRolePermissions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PermissionHTTPClientImpl) GetUserPermission(ctx context.Context, in *GetUserPermissionRequest, opts ...http.CallOption) (*GetUserPermissionReply, error) {
	var out GetUserPermissionReply
	pattern := "/permission/user/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPermissionGetUserPermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PermissionHTTPClientImpl) UpdateUserPermission(ctx context.Context, in *UpdateUserPermissionRequest, opts ...http.CallOption) (*UpdateUserPermissionReply, error) {
	var out UpdateUserPermissionReply
	pattern := "/permission/user/{user_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPermissionUpdateUserPermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
