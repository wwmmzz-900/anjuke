// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: appointment/v1/appointment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppointmentService_ListAvailableStores_FullMethodName     = "/api.appointment.v1.AppointmentService/ListAvailableStores"
	AppointmentService_GetAvailableSlots_FullMethodName       = "/api.appointment.v1.AppointmentService/GetAvailableSlots"
	AppointmentService_CreateAppointment_FullMethodName       = "/api.appointment.v1.AppointmentService/CreateAppointment"
	AppointmentService_GetAppointment_FullMethodName          = "/api.appointment.v1.AppointmentService/GetAppointment"
	AppointmentService_CancelAppointment_FullMethodName       = "/api.appointment.v1.AppointmentService/CancelAppointment"
	AppointmentService_AcceptAppointment_FullMethodName       = "/api.appointment.v1.AppointmentService/AcceptAppointment"
	AppointmentService_ConfirmAppointment_FullMethodName      = "/api.appointment.v1.AppointmentService/ConfirmAppointment"
	AppointmentService_CompleteAppointment_FullMethodName     = "/api.appointment.v1.AppointmentService/CompleteAppointment"
	AppointmentService_ListRealtorAppointments_FullMethodName = "/api.appointment.v1.AppointmentService/ListRealtorAppointments"
	AppointmentService_UpdateRealtorStatus_FullMethodName     = "/api.appointment.v1.AppointmentService/UpdateRealtorStatus"
)

// AppointmentServiceClient is the client API for AppointmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 预约服务
type AppointmentServiceClient interface {
	// 获取可预约门店列表
	ListAvailableStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error)
	// 获取门店可预约时段
	GetAvailableSlots(ctx context.Context, in *GetAvailableSlotsRequest, opts ...grpc.CallOption) (*GetAvailableSlotsResponse, error)
	// 创建预约
	CreateAppointment(ctx context.Context, in *CreateAppointmentRequest, opts ...grpc.CallOption) (*CreateAppointmentResponse, error)
	// 获取预约详情
	GetAppointment(ctx context.Context, in *GetAppointmentRequest, opts ...grpc.CallOption) (*GetAppointmentResponse, error)
	// 取消预约
	CancelAppointment(ctx context.Context, in *CancelAppointmentRequest, opts ...grpc.CallOption) (*CancelAppointmentResponse, error)
	// 经纪人接单
	AcceptAppointment(ctx context.Context, in *AcceptAppointmentRequest, opts ...grpc.CallOption) (*AcceptAppointmentResponse, error)
	// 经纪人确认服务
	ConfirmAppointment(ctx context.Context, in *ConfirmAppointmentRequest, opts ...grpc.CallOption) (*ConfirmAppointmentResponse, error)
	// 完成服务
	CompleteAppointment(ctx context.Context, in *CompleteAppointmentRequest, opts ...grpc.CallOption) (*CompleteAppointmentResponse, error)
	// 获取经纪人预约列表
	ListRealtorAppointments(ctx context.Context, in *ListRealtorAppointmentsRequest, opts ...grpc.CallOption) (*ListRealtorAppointmentsResponse, error)
	// 更新经纪人状态
	UpdateRealtorStatus(ctx context.Context, in *UpdateRealtorStatusRequest, opts ...grpc.CallOption) (*UpdateRealtorStatusResponse, error)
}

type appointmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppointmentServiceClient(cc grpc.ClientConnInterface) AppointmentServiceClient {
	return &appointmentServiceClient{cc}
}

func (c *appointmentServiceClient) ListAvailableStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStoresResponse)
	err := c.cc.Invoke(ctx, AppointmentService_ListAvailableStores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) GetAvailableSlots(ctx context.Context, in *GetAvailableSlotsRequest, opts ...grpc.CallOption) (*GetAvailableSlotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailableSlotsResponse)
	err := c.cc.Invoke(ctx, AppointmentService_GetAvailableSlots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) CreateAppointment(ctx context.Context, in *CreateAppointmentRequest, opts ...grpc.CallOption) (*CreateAppointmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAppointmentResponse)
	err := c.cc.Invoke(ctx, AppointmentService_CreateAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) GetAppointment(ctx context.Context, in *GetAppointmentRequest, opts ...grpc.CallOption) (*GetAppointmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppointmentResponse)
	err := c.cc.Invoke(ctx, AppointmentService_GetAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) CancelAppointment(ctx context.Context, in *CancelAppointmentRequest, opts ...grpc.CallOption) (*CancelAppointmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelAppointmentResponse)
	err := c.cc.Invoke(ctx, AppointmentService_CancelAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) AcceptAppointment(ctx context.Context, in *AcceptAppointmentRequest, opts ...grpc.CallOption) (*AcceptAppointmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptAppointmentResponse)
	err := c.cc.Invoke(ctx, AppointmentService_AcceptAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) ConfirmAppointment(ctx context.Context, in *ConfirmAppointmentRequest, opts ...grpc.CallOption) (*ConfirmAppointmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmAppointmentResponse)
	err := c.cc.Invoke(ctx, AppointmentService_ConfirmAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) CompleteAppointment(ctx context.Context, in *CompleteAppointmentRequest, opts ...grpc.CallOption) (*CompleteAppointmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteAppointmentResponse)
	err := c.cc.Invoke(ctx, AppointmentService_CompleteAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) ListRealtorAppointments(ctx context.Context, in *ListRealtorAppointmentsRequest, opts ...grpc.CallOption) (*ListRealtorAppointmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRealtorAppointmentsResponse)
	err := c.cc.Invoke(ctx, AppointmentService_ListRealtorAppointments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) UpdateRealtorStatus(ctx context.Context, in *UpdateRealtorStatusRequest, opts ...grpc.CallOption) (*UpdateRealtorStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRealtorStatusResponse)
	err := c.cc.Invoke(ctx, AppointmentService_UpdateRealtorStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppointmentServiceServer is the server API for AppointmentService service.
// All implementations must embed UnimplementedAppointmentServiceServer
// for forward compatibility.
//
// 预约服务
type AppointmentServiceServer interface {
	// 获取可预约门店列表
	ListAvailableStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error)
	// 获取门店可预约时段
	GetAvailableSlots(context.Context, *GetAvailableSlotsRequest) (*GetAvailableSlotsResponse, error)
	// 创建预约
	CreateAppointment(context.Context, *CreateAppointmentRequest) (*CreateAppointmentResponse, error)
	// 获取预约详情
	GetAppointment(context.Context, *GetAppointmentRequest) (*GetAppointmentResponse, error)
	// 取消预约
	CancelAppointment(context.Context, *CancelAppointmentRequest) (*CancelAppointmentResponse, error)
	// 经纪人接单
	AcceptAppointment(context.Context, *AcceptAppointmentRequest) (*AcceptAppointmentResponse, error)
	// 经纪人确认服务
	ConfirmAppointment(context.Context, *ConfirmAppointmentRequest) (*ConfirmAppointmentResponse, error)
	// 完成服务
	CompleteAppointment(context.Context, *CompleteAppointmentRequest) (*CompleteAppointmentResponse, error)
	// 获取经纪人预约列表
	ListRealtorAppointments(context.Context, *ListRealtorAppointmentsRequest) (*ListRealtorAppointmentsResponse, error)
	// 更新经纪人状态
	UpdateRealtorStatus(context.Context, *UpdateRealtorStatusRequest) (*UpdateRealtorStatusResponse, error)
	mustEmbedUnimplementedAppointmentServiceServer()
}

// UnimplementedAppointmentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppointmentServiceServer struct{}

func (UnimplementedAppointmentServiceServer) ListAvailableStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableStores not implemented")
}
func (UnimplementedAppointmentServiceServer) GetAvailableSlots(context.Context, *GetAvailableSlotsRequest) (*GetAvailableSlotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableSlots not implemented")
}
func (UnimplementedAppointmentServiceServer) CreateAppointment(context.Context, *CreateAppointmentRequest) (*CreateAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppointment not implemented")
}
func (UnimplementedAppointmentServiceServer) GetAppointment(context.Context, *GetAppointmentRequest) (*GetAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointment not implemented")
}
func (UnimplementedAppointmentServiceServer) CancelAppointment(context.Context, *CancelAppointmentRequest) (*CancelAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAppointment not implemented")
}
func (UnimplementedAppointmentServiceServer) AcceptAppointment(context.Context, *AcceptAppointmentRequest) (*AcceptAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptAppointment not implemented")
}
func (UnimplementedAppointmentServiceServer) ConfirmAppointment(context.Context, *ConfirmAppointmentRequest) (*ConfirmAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmAppointment not implemented")
}
func (UnimplementedAppointmentServiceServer) CompleteAppointment(context.Context, *CompleteAppointmentRequest) (*CompleteAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteAppointment not implemented")
}
func (UnimplementedAppointmentServiceServer) ListRealtorAppointments(context.Context, *ListRealtorAppointmentsRequest) (*ListRealtorAppointmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRealtorAppointments not implemented")
}
func (UnimplementedAppointmentServiceServer) UpdateRealtorStatus(context.Context, *UpdateRealtorStatusRequest) (*UpdateRealtorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRealtorStatus not implemented")
}
func (UnimplementedAppointmentServiceServer) mustEmbedUnimplementedAppointmentServiceServer() {}
func (UnimplementedAppointmentServiceServer) testEmbeddedByValue()                            {}

// UnsafeAppointmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppointmentServiceServer will
// result in compilation errors.
type UnsafeAppointmentServiceServer interface {
	mustEmbedUnimplementedAppointmentServiceServer()
}

func RegisterAppointmentServiceServer(s grpc.ServiceRegistrar, srv AppointmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppointmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppointmentService_ServiceDesc, srv)
}

func _AppointmentService_ListAvailableStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).ListAvailableStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_ListAvailableStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).ListAvailableStores(ctx, req.(*ListStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_GetAvailableSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableSlotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).GetAvailableSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_GetAvailableSlots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).GetAvailableSlots(ctx, req.(*GetAvailableSlotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_CreateAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).CreateAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_CreateAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).CreateAppointment(ctx, req.(*CreateAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_GetAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).GetAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_GetAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).GetAppointment(ctx, req.(*GetAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_CancelAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).CancelAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_CancelAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).CancelAppointment(ctx, req.(*CancelAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_AcceptAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).AcceptAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_AcceptAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).AcceptAppointment(ctx, req.(*AcceptAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_ConfirmAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).ConfirmAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_ConfirmAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).ConfirmAppointment(ctx, req.(*ConfirmAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_CompleteAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).CompleteAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_CompleteAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).CompleteAppointment(ctx, req.(*CompleteAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_ListRealtorAppointments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRealtorAppointmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).ListRealtorAppointments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_ListRealtorAppointments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).ListRealtorAppointments(ctx, req.(*ListRealtorAppointmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_UpdateRealtorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRealtorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).UpdateRealtorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_UpdateRealtorStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).UpdateRealtorStatus(ctx, req.(*UpdateRealtorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppointmentService_ServiceDesc is the grpc.ServiceDesc for AppointmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppointmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.appointment.v1.AppointmentService",
	HandlerType: (*AppointmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAvailableStores",
			Handler:    _AppointmentService_ListAvailableStores_Handler,
		},
		{
			MethodName: "GetAvailableSlots",
			Handler:    _AppointmentService_GetAvailableSlots_Handler,
		},
		{
			MethodName: "CreateAppointment",
			Handler:    _AppointmentService_CreateAppointment_Handler,
		},
		{
			MethodName: "GetAppointment",
			Handler:    _AppointmentService_GetAppointment_Handler,
		},
		{
			MethodName: "CancelAppointment",
			Handler:    _AppointmentService_CancelAppointment_Handler,
		},
		{
			MethodName: "AcceptAppointment",
			Handler:    _AppointmentService_AcceptAppointment_Handler,
		},
		{
			MethodName: "ConfirmAppointment",
			Handler:    _AppointmentService_ConfirmAppointment_Handler,
		},
		{
			MethodName: "CompleteAppointment",
			Handler:    _AppointmentService_CompleteAppointment_Handler,
		},
		{
			MethodName: "ListRealtorAppointments",
			Handler:    _AppointmentService_ListRealtorAppointments_Handler,
		},
		{
			MethodName: "UpdateRealtorStatus",
			Handler:    _AppointmentService_UpdateRealtorStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appointment/v1/appointment.proto",
}
