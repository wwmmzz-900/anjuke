// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: appointment/v1/appointment.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAppointmentServiceAcceptAppointment = "/api.appointment.v1.AppointmentService/AcceptAppointment"
const OperationAppointmentServiceCancelAppointment = "/api.appointment.v1.AppointmentService/CancelAppointment"
const OperationAppointmentServiceCompleteAppointment = "/api.appointment.v1.AppointmentService/CompleteAppointment"
const OperationAppointmentServiceConfirmAppointment = "/api.appointment.v1.AppointmentService/ConfirmAppointment"
const OperationAppointmentServiceCreateAppointment = "/api.appointment.v1.AppointmentService/CreateAppointment"
const OperationAppointmentServiceGetAppointment = "/api.appointment.v1.AppointmentService/GetAppointment"
const OperationAppointmentServiceGetAvailableSlots = "/api.appointment.v1.AppointmentService/GetAvailableSlots"
const OperationAppointmentServiceListAvailableStores = "/api.appointment.v1.AppointmentService/ListAvailableStores"
const OperationAppointmentServiceListRealtorAppointments = "/api.appointment.v1.AppointmentService/ListRealtorAppointments"
const OperationAppointmentServiceUpdateRealtorStatus = "/api.appointment.v1.AppointmentService/UpdateRealtorStatus"

type AppointmentServiceHTTPServer interface {
	// AcceptAppointment 经纪人接单
	AcceptAppointment(context.Context, *AcceptAppointmentRequest) (*AcceptAppointmentResponse, error)
	// CancelAppointment 取消预约
	CancelAppointment(context.Context, *CancelAppointmentRequest) (*CancelAppointmentResponse, error)
	// CompleteAppointment 完成服务
	CompleteAppointment(context.Context, *CompleteAppointmentRequest) (*CompleteAppointmentResponse, error)
	// ConfirmAppointment 经纪人确认服务
	ConfirmAppointment(context.Context, *ConfirmAppointmentRequest) (*ConfirmAppointmentResponse, error)
	// CreateAppointment 创建预约
	CreateAppointment(context.Context, *CreateAppointmentRequest) (*CreateAppointmentResponse, error)
	// GetAppointment 获取预约详情
	GetAppointment(context.Context, *GetAppointmentRequest) (*GetAppointmentResponse, error)
	// GetAvailableSlots 获取门店可预约时段
	GetAvailableSlots(context.Context, *GetAvailableSlotsRequest) (*GetAvailableSlotsResponse, error)
	// ListAvailableStores 获取可预约门店列表
	ListAvailableStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error)
	// ListRealtorAppointments 获取经纪人预约列表
	ListRealtorAppointments(context.Context, *ListRealtorAppointmentsRequest) (*ListRealtorAppointmentsResponse, error)
	// UpdateRealtorStatus 更新经纪人状态
	UpdateRealtorStatus(context.Context, *UpdateRealtorStatusRequest) (*UpdateRealtorStatusResponse, error)
}

func RegisterAppointmentServiceHTTPServer(s *http.Server, srv AppointmentServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/appointment/stores", _AppointmentService_ListAvailableStores0_HTTP_Handler(srv))
	r.GET("/api/v1/appointment/stores/{store_id}/slots", _AppointmentService_GetAvailableSlots0_HTTP_Handler(srv))
	r.POST("/api/v1/appointment/appointments", _AppointmentService_CreateAppointment0_HTTP_Handler(srv))
	r.GET("/api/v1/appointment/appointments/{appointment_id}", _AppointmentService_GetAppointment0_HTTP_Handler(srv))
	r.POST("/api/v1/appointment/appointments/{appointment_id}/cancel", _AppointmentService_CancelAppointment0_HTTP_Handler(srv))
	r.POST("/api/v1/appointment/appointments/{appointment_id}/accept", _AppointmentService_AcceptAppointment0_HTTP_Handler(srv))
	r.POST("/api/v1/appointment/appointments/{appointment_id}/confirm", _AppointmentService_ConfirmAppointment0_HTTP_Handler(srv))
	r.POST("/api/v1/appointment/appointments/{appointment_id}/complete", _AppointmentService_CompleteAppointment0_HTTP_Handler(srv))
	r.GET("/api/v1/appointment/realtor/appointments", _AppointmentService_ListRealtorAppointments0_HTTP_Handler(srv))
	r.POST("/api/v1/appointment/realtor/status", _AppointmentService_UpdateRealtorStatus0_HTTP_Handler(srv))
}

func _AppointmentService_ListAvailableStores0_HTTP_Handler(srv AppointmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListStoresRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppointmentServiceListAvailableStores)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAvailableStores(ctx, req.(*ListStoresRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListStoresResponse)
		return ctx.Result(200, reply)
	}
}

func _AppointmentService_GetAvailableSlots0_HTTP_Handler(srv AppointmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAvailableSlotsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppointmentServiceGetAvailableSlots)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAvailableSlots(ctx, req.(*GetAvailableSlotsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAvailableSlotsResponse)
		return ctx.Result(200, reply)
	}
}

func _AppointmentService_CreateAppointment0_HTTP_Handler(srv AppointmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAppointmentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppointmentServiceCreateAppointment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAppointment(ctx, req.(*CreateAppointmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAppointmentResponse)
		return ctx.Result(200, reply)
	}
}

func _AppointmentService_GetAppointment0_HTTP_Handler(srv AppointmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAppointmentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppointmentServiceGetAppointment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAppointment(ctx, req.(*GetAppointmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAppointmentResponse)
		return ctx.Result(200, reply)
	}
}

func _AppointmentService_CancelAppointment0_HTTP_Handler(srv AppointmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelAppointmentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppointmentServiceCancelAppointment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelAppointment(ctx, req.(*CancelAppointmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CancelAppointmentResponse)
		return ctx.Result(200, reply)
	}
}

func _AppointmentService_AcceptAppointment0_HTTP_Handler(srv AppointmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AcceptAppointmentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppointmentServiceAcceptAppointment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AcceptAppointment(ctx, req.(*AcceptAppointmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AcceptAppointmentResponse)
		return ctx.Result(200, reply)
	}
}

func _AppointmentService_ConfirmAppointment0_HTTP_Handler(srv AppointmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ConfirmAppointmentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppointmentServiceConfirmAppointment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ConfirmAppointment(ctx, req.(*ConfirmAppointmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConfirmAppointmentResponse)
		return ctx.Result(200, reply)
	}
}

func _AppointmentService_CompleteAppointment0_HTTP_Handler(srv AppointmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CompleteAppointmentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppointmentServiceCompleteAppointment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CompleteAppointment(ctx, req.(*CompleteAppointmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CompleteAppointmentResponse)
		return ctx.Result(200, reply)
	}
}

func _AppointmentService_ListRealtorAppointments0_HTTP_Handler(srv AppointmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRealtorAppointmentsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppointmentServiceListRealtorAppointments)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRealtorAppointments(ctx, req.(*ListRealtorAppointmentsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRealtorAppointmentsResponse)
		return ctx.Result(200, reply)
	}
}

func _AppointmentService_UpdateRealtorStatus0_HTTP_Handler(srv AppointmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRealtorStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppointmentServiceUpdateRealtorStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRealtorStatus(ctx, req.(*UpdateRealtorStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRealtorStatusResponse)
		return ctx.Result(200, reply)
	}
}

type AppointmentServiceHTTPClient interface {
	AcceptAppointment(ctx context.Context, req *AcceptAppointmentRequest, opts ...http.CallOption) (rsp *AcceptAppointmentResponse, err error)
	CancelAppointment(ctx context.Context, req *CancelAppointmentRequest, opts ...http.CallOption) (rsp *CancelAppointmentResponse, err error)
	CompleteAppointment(ctx context.Context, req *CompleteAppointmentRequest, opts ...http.CallOption) (rsp *CompleteAppointmentResponse, err error)
	ConfirmAppointment(ctx context.Context, req *ConfirmAppointmentRequest, opts ...http.CallOption) (rsp *ConfirmAppointmentResponse, err error)
	CreateAppointment(ctx context.Context, req *CreateAppointmentRequest, opts ...http.CallOption) (rsp *CreateAppointmentResponse, err error)
	GetAppointment(ctx context.Context, req *GetAppointmentRequest, opts ...http.CallOption) (rsp *GetAppointmentResponse, err error)
	GetAvailableSlots(ctx context.Context, req *GetAvailableSlotsRequest, opts ...http.CallOption) (rsp *GetAvailableSlotsResponse, err error)
	ListAvailableStores(ctx context.Context, req *ListStoresRequest, opts ...http.CallOption) (rsp *ListStoresResponse, err error)
	ListRealtorAppointments(ctx context.Context, req *ListRealtorAppointmentsRequest, opts ...http.CallOption) (rsp *ListRealtorAppointmentsResponse, err error)
	UpdateRealtorStatus(ctx context.Context, req *UpdateRealtorStatusRequest, opts ...http.CallOption) (rsp *UpdateRealtorStatusResponse, err error)
}

type AppointmentServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAppointmentServiceHTTPClient(client *http.Client) AppointmentServiceHTTPClient {
	return &AppointmentServiceHTTPClientImpl{client}
}

func (c *AppointmentServiceHTTPClientImpl) AcceptAppointment(ctx context.Context, in *AcceptAppointmentRequest, opts ...http.CallOption) (*AcceptAppointmentResponse, error) {
	var out AcceptAppointmentResponse
	pattern := "/api/v1/appointment/appointments/{appointment_id}/accept"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppointmentServiceAcceptAppointment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppointmentServiceHTTPClientImpl) CancelAppointment(ctx context.Context, in *CancelAppointmentRequest, opts ...http.CallOption) (*CancelAppointmentResponse, error) {
	var out CancelAppointmentResponse
	pattern := "/api/v1/appointment/appointments/{appointment_id}/cancel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppointmentServiceCancelAppointment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppointmentServiceHTTPClientImpl) CompleteAppointment(ctx context.Context, in *CompleteAppointmentRequest, opts ...http.CallOption) (*CompleteAppointmentResponse, error) {
	var out CompleteAppointmentResponse
	pattern := "/api/v1/appointment/appointments/{appointment_id}/complete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppointmentServiceCompleteAppointment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppointmentServiceHTTPClientImpl) ConfirmAppointment(ctx context.Context, in *ConfirmAppointmentRequest, opts ...http.CallOption) (*ConfirmAppointmentResponse, error) {
	var out ConfirmAppointmentResponse
	pattern := "/api/v1/appointment/appointments/{appointment_id}/confirm"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppointmentServiceConfirmAppointment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppointmentServiceHTTPClientImpl) CreateAppointment(ctx context.Context, in *CreateAppointmentRequest, opts ...http.CallOption) (*CreateAppointmentResponse, error) {
	var out CreateAppointmentResponse
	pattern := "/api/v1/appointment/appointments"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppointmentServiceCreateAppointment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppointmentServiceHTTPClientImpl) GetAppointment(ctx context.Context, in *GetAppointmentRequest, opts ...http.CallOption) (*GetAppointmentResponse, error) {
	var out GetAppointmentResponse
	pattern := "/api/v1/appointment/appointments/{appointment_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppointmentServiceGetAppointment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppointmentServiceHTTPClientImpl) GetAvailableSlots(ctx context.Context, in *GetAvailableSlotsRequest, opts ...http.CallOption) (*GetAvailableSlotsResponse, error) {
	var out GetAvailableSlotsResponse
	pattern := "/api/v1/appointment/stores/{store_id}/slots"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppointmentServiceGetAvailableSlots))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppointmentServiceHTTPClientImpl) ListAvailableStores(ctx context.Context, in *ListStoresRequest, opts ...http.CallOption) (*ListStoresResponse, error) {
	var out ListStoresResponse
	pattern := "/api/v1/appointment/stores"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppointmentServiceListAvailableStores))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppointmentServiceHTTPClientImpl) ListRealtorAppointments(ctx context.Context, in *ListRealtorAppointmentsRequest, opts ...http.CallOption) (*ListRealtorAppointmentsResponse, error) {
	var out ListRealtorAppointmentsResponse
	pattern := "/api/v1/appointment/realtor/appointments"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppointmentServiceListRealtorAppointments))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppointmentServiceHTTPClientImpl) UpdateRealtorStatus(ctx context.Context, in *UpdateRealtorStatusRequest, opts ...http.CallOption) (*UpdateRealtorStatusResponse, error) {
	var out UpdateRealtorStatusResponse
	pattern := "/api/v1/appointment/realtor/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppointmentServiceUpdateRealtorStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
