// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: company/v1/company.proto

package v1

import (
	v1 "anjuke/server/api/common/v1"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCompanyCreateCompany = "/api.company.v1.Company/CreateCompany"
const OperationCompanyDeleteCompany = "/api.company.v1.Company/DeleteCompany"
const OperationCompanyGetCompany = "/api.company.v1.Company/GetCompany"
const OperationCompanyGetCompanyStores = "/api.company.v1.Company/GetCompanyStores"
const OperationCompanyGetStoresByCompanyID = "/api.company.v1.Company/GetStoresByCompanyID"
const OperationCompanyListCompanies = "/api.company.v1.Company/ListCompanies"
const OperationCompanyUpdateCompany = "/api.company.v1.Company/UpdateCompany"

type CompanyHTTPServer interface {
	// CreateCompany 创建公司
	CreateCompany(context.Context, *CreateCompanyRequest) (*v1.BaseResponse, error)
	// DeleteCompany 删除公司
	DeleteCompany(context.Context, *DeleteCompanyRequest) (*v1.BaseResponse, error)
	// GetCompany 获取公司详情
	GetCompany(context.Context, *GetCompanyRequest) (*v1.BaseResponse, error)
	// GetCompanyStores 获取公司下的门店列表
	GetCompanyStores(context.Context, *GetCompanyStoresRequest) (*v1.BaseResponse, error)
	// GetStoresByCompanyID 获取公司下的门店列表（分页）
	GetStoresByCompanyID(context.Context, *GetStoresByCompanyIDRequest) (*v1.BaseResponse, error)
	// ListCompanies 查询公司列表
	ListCompanies(context.Context, *ListCompaniesRequest) (*v1.BaseResponse, error)
	// UpdateCompany 更新公司信息
	UpdateCompany(context.Context, *UpdateCompanyRequest) (*v1.BaseResponse, error)
}

func RegisterCompanyHTTPServer(s *http.Server, srv CompanyHTTPServer) {
	r := s.Route("/")
	r.POST("/api/companies", _Company_CreateCompany0_HTTP_Handler(srv))
	r.GET("/api/companies/{id}", _Company_GetCompany0_HTTP_Handler(srv))
	r.PUT("/api/companies/{id}", _Company_UpdateCompany0_HTTP_Handler(srv))
	r.DELETE("/api/companies/{id}", _Company_DeleteCompany0_HTTP_Handler(srv))
	r.GET("/api/companies", _Company_ListCompanies0_HTTP_Handler(srv))
	r.GET("/api/companies/{company_id}/stores", _Company_GetCompanyStores0_HTTP_Handler(srv))
	r.GET("/api/companies/{company_id}/stores/page", _Company_GetStoresByCompanyID0_HTTP_Handler(srv))
}

func _Company_CreateCompany0_HTTP_Handler(srv CompanyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCompanyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCompanyCreateCompany)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCompany(ctx, req.(*CreateCompanyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Company_GetCompany0_HTTP_Handler(srv CompanyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCompanyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCompanyGetCompany)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCompany(ctx, req.(*GetCompanyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Company_UpdateCompany0_HTTP_Handler(srv CompanyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCompanyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCompanyUpdateCompany)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCompany(ctx, req.(*UpdateCompanyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Company_DeleteCompany0_HTTP_Handler(srv CompanyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCompanyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCompanyDeleteCompany)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCompany(ctx, req.(*DeleteCompanyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Company_ListCompanies0_HTTP_Handler(srv CompanyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCompaniesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCompanyListCompanies)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCompanies(ctx, req.(*ListCompaniesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Company_GetCompanyStores0_HTTP_Handler(srv CompanyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCompanyStoresRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCompanyGetCompanyStores)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCompanyStores(ctx, req.(*GetCompanyStoresRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Company_GetStoresByCompanyID0_HTTP_Handler(srv CompanyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStoresByCompanyIDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCompanyGetStoresByCompanyID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStoresByCompanyID(ctx, req.(*GetStoresByCompanyIDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

type CompanyHTTPClient interface {
	CreateCompany(ctx context.Context, req *CreateCompanyRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	DeleteCompany(ctx context.Context, req *DeleteCompanyRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	GetCompany(ctx context.Context, req *GetCompanyRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	GetCompanyStores(ctx context.Context, req *GetCompanyStoresRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	GetStoresByCompanyID(ctx context.Context, req *GetStoresByCompanyIDRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	ListCompanies(ctx context.Context, req *ListCompaniesRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	UpdateCompany(ctx context.Context, req *UpdateCompanyRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
}

type CompanyHTTPClientImpl struct {
	cc *http.Client
}

func NewCompanyHTTPClient(client *http.Client) CompanyHTTPClient {
	return &CompanyHTTPClientImpl{client}
}

func (c *CompanyHTTPClientImpl) CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/companies"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCompanyCreateCompany))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CompanyHTTPClientImpl) DeleteCompany(ctx context.Context, in *DeleteCompanyRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/companies/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCompanyDeleteCompany))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CompanyHTTPClientImpl) GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/companies/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCompanyGetCompany))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CompanyHTTPClientImpl) GetCompanyStores(ctx context.Context, in *GetCompanyStoresRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/companies/{company_id}/stores"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCompanyGetCompanyStores))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CompanyHTTPClientImpl) GetStoresByCompanyID(ctx context.Context, in *GetStoresByCompanyIDRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/companies/{company_id}/stores/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCompanyGetStoresByCompanyID))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CompanyHTTPClientImpl) ListCompanies(ctx context.Context, in *ListCompaniesRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/companies"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCompanyListCompanies))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CompanyHTTPClientImpl) UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/companies/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCompanyUpdateCompany))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationStoreCreateStore = "/api.company.v1.Store/CreateStore"
const OperationStoreDeleteStore = "/api.company.v1.Store/DeleteStore"
const OperationStoreGetRealtorsByStoreID = "/api.company.v1.Store/GetRealtorsByStoreID"
const OperationStoreGetStore = "/api.company.v1.Store/GetStore"
const OperationStoreGetStoreRealtors = "/api.company.v1.Store/GetStoreRealtors"
const OperationStoreListAvailableStores = "/api.company.v1.Store/ListAvailableStores"
const OperationStoreListStores = "/api.company.v1.Store/ListStores"
const OperationStoreUpdateStore = "/api.company.v1.Store/UpdateStore"

type StoreHTTPServer interface {
	// CreateStore 创建门店
	CreateStore(context.Context, *CreateStoreRequest) (*v1.BaseResponse, error)
	// DeleteStore 删除门店
	DeleteStore(context.Context, *DeleteStoreRequest) (*v1.BaseResponse, error)
	// GetRealtorsByStoreID 获取门店下的经纪人列表（分页）
	GetRealtorsByStoreID(context.Context, *GetRealtorsByStoreIDRequest) (*v1.BaseResponse, error)
	// GetStore 获取门店详情
	GetStore(context.Context, *GetStoreRequest) (*v1.BaseResponse, error)
	// GetStoreRealtors 获取门店下的经纪人列表
	GetStoreRealtors(context.Context, *GetStoreRealtorsRequest) (*v1.BaseResponse, error)
	// ListAvailableStores 获取可预约门店列表（包含预约相关信息）
	ListAvailableStores(context.Context, *ListAvailableStoresRequest) (*v1.BaseResponse, error)
	// ListStores 查询门店列表
	ListStores(context.Context, *ListStoresRequest) (*v1.BaseResponse, error)
	// UpdateStore 更新门店信息
	UpdateStore(context.Context, *UpdateStoreRequest) (*v1.BaseResponse, error)
}

func RegisterStoreHTTPServer(s *http.Server, srv StoreHTTPServer) {
	r := s.Route("/")
	r.POST("/api/stores", _Store_CreateStore0_HTTP_Handler(srv))
	r.GET("/api/stores/{id}", _Store_GetStore0_HTTP_Handler(srv))
	r.PUT("/api/stores/{id}", _Store_UpdateStore0_HTTP_Handler(srv))
	r.DELETE("/api/stores/{id}", _Store_DeleteStore0_HTTP_Handler(srv))
	r.GET("/api/stores", _Store_ListStores0_HTTP_Handler(srv))
	r.GET("/api/stores/{store_id}/realtors", _Store_GetStoreRealtors0_HTTP_Handler(srv))
	r.GET("/api/stores/{store_id}/realtors/page", _Store_GetRealtorsByStoreID0_HTTP_Handler(srv))
	r.GET("/api/stores/available", _Store_ListAvailableStores1_HTTP_Handler(srv))
}

func _Store_CreateStore0_HTTP_Handler(srv StoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateStoreRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStoreCreateStore)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateStore(ctx, req.(*CreateStoreRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Store_GetStore0_HTTP_Handler(srv StoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStoreRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStoreGetStore)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStore(ctx, req.(*GetStoreRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Store_UpdateStore0_HTTP_Handler(srv StoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateStoreRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStoreUpdateStore)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateStore(ctx, req.(*UpdateStoreRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Store_DeleteStore0_HTTP_Handler(srv StoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteStoreRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStoreDeleteStore)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteStore(ctx, req.(*DeleteStoreRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Store_ListStores0_HTTP_Handler(srv StoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListStoresRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStoreListStores)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListStores(ctx, req.(*ListStoresRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Store_GetStoreRealtors0_HTTP_Handler(srv StoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStoreRealtorsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStoreGetStoreRealtors)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStoreRealtors(ctx, req.(*GetStoreRealtorsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Store_GetRealtorsByStoreID0_HTTP_Handler(srv StoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRealtorsByStoreIDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStoreGetRealtorsByStoreID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRealtorsByStoreID(ctx, req.(*GetRealtorsByStoreIDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Store_ListAvailableStores1_HTTP_Handler(srv StoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAvailableStoresRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStoreListAvailableStores)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAvailableStores(ctx, req.(*ListAvailableStoresRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

type StoreHTTPClient interface {
	CreateStore(ctx context.Context, req *CreateStoreRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	DeleteStore(ctx context.Context, req *DeleteStoreRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	GetRealtorsByStoreID(ctx context.Context, req *GetRealtorsByStoreIDRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	GetStore(ctx context.Context, req *GetStoreRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	GetStoreRealtors(ctx context.Context, req *GetStoreRealtorsRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	ListAvailableStores(ctx context.Context, req *ListAvailableStoresRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	ListStores(ctx context.Context, req *ListStoresRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	UpdateStore(ctx context.Context, req *UpdateStoreRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
}

type StoreHTTPClientImpl struct {
	cc *http.Client
}

func NewStoreHTTPClient(client *http.Client) StoreHTTPClient {
	return &StoreHTTPClientImpl{client}
}

func (c *StoreHTTPClientImpl) CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/stores"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStoreCreateStore))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StoreHTTPClientImpl) DeleteStore(ctx context.Context, in *DeleteStoreRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/stores/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStoreDeleteStore))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StoreHTTPClientImpl) GetRealtorsByStoreID(ctx context.Context, in *GetRealtorsByStoreIDRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/stores/{store_id}/realtors/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStoreGetRealtorsByStoreID))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StoreHTTPClientImpl) GetStore(ctx context.Context, in *GetStoreRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/stores/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStoreGetStore))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StoreHTTPClientImpl) GetStoreRealtors(ctx context.Context, in *GetStoreRealtorsRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/stores/{store_id}/realtors"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStoreGetStoreRealtors))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StoreHTTPClientImpl) ListAvailableStores(ctx context.Context, in *ListAvailableStoresRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/stores/available"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStoreListAvailableStores))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StoreHTTPClientImpl) ListStores(ctx context.Context, in *ListStoresRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/stores"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStoreListStores))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StoreHTTPClientImpl) UpdateStore(ctx context.Context, in *UpdateStoreRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/stores/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStoreUpdateStore))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationRealtorCreateRealtor = "/api.company.v1.Realtor/CreateRealtor"
const OperationRealtorDeleteRealtor = "/api.company.v1.Realtor/DeleteRealtor"
const OperationRealtorGetRealtor = "/api.company.v1.Realtor/GetRealtor"
const OperationRealtorGetRealtorStatus = "/api.company.v1.Realtor/GetRealtorStatus"
const OperationRealtorListRealtors = "/api.company.v1.Realtor/ListRealtors"
const OperationRealtorUpdateRealtor = "/api.company.v1.Realtor/UpdateRealtor"
const OperationRealtorUpdateRealtorStatus = "/api.company.v1.Realtor/UpdateRealtorStatus"

type RealtorHTTPServer interface {
	// CreateRealtor 创建经纪人
	CreateRealtor(context.Context, *CreateRealtorRequest) (*v1.BaseResponse, error)
	// DeleteRealtor 删除经纪人
	DeleteRealtor(context.Context, *DeleteRealtorRequest) (*v1.BaseResponse, error)
	// GetRealtor 获取经纪人详情
	GetRealtor(context.Context, *GetRealtorRequest) (*v1.BaseResponse, error)
	// GetRealtorStatus 获取经纪人状态
	GetRealtorStatus(context.Context, *GetRealtorStatusRequest) (*v1.BaseResponse, error)
	// ListRealtors 查询经纪人列表
	ListRealtors(context.Context, *ListRealtorsRequest) (*v1.BaseResponse, error)
	// UpdateRealtor 更新经纪人信息
	UpdateRealtor(context.Context, *UpdateRealtorRequest) (*v1.BaseResponse, error)
	// UpdateRealtorStatus 更新经纪人状态
	UpdateRealtorStatus(context.Context, *UpdateRealtorStatusRequest) (*v1.BaseResponse, error)
}

func RegisterRealtorHTTPServer(s *http.Server, srv RealtorHTTPServer) {
	r := s.Route("/")
	r.POST("/api/realtors", _Realtor_CreateRealtor0_HTTP_Handler(srv))
	r.GET("/api/realtors/{id}", _Realtor_GetRealtor0_HTTP_Handler(srv))
	r.PUT("/api/realtors/{id}", _Realtor_UpdateRealtor0_HTTP_Handler(srv))
	r.DELETE("/api/realtors/{id}", _Realtor_DeleteRealtor0_HTTP_Handler(srv))
	r.GET("/api/realtors", _Realtor_ListRealtors0_HTTP_Handler(srv))
	r.GET("/api/realtors/{realtor_id}/status", _Realtor_GetRealtorStatus0_HTTP_Handler(srv))
	r.PUT("/api/realtors/{realtor_id}/status", _Realtor_UpdateRealtorStatus1_HTTP_Handler(srv))
}

func _Realtor_CreateRealtor0_HTTP_Handler(srv RealtorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRealtorRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealtorCreateRealtor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRealtor(ctx, req.(*CreateRealtorRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Realtor_GetRealtor0_HTTP_Handler(srv RealtorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRealtorRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealtorGetRealtor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRealtor(ctx, req.(*GetRealtorRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Realtor_UpdateRealtor0_HTTP_Handler(srv RealtorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRealtorRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealtorUpdateRealtor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRealtor(ctx, req.(*UpdateRealtorRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Realtor_DeleteRealtor0_HTTP_Handler(srv RealtorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRealtorRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealtorDeleteRealtor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRealtor(ctx, req.(*DeleteRealtorRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Realtor_ListRealtors0_HTTP_Handler(srv RealtorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRealtorsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealtorListRealtors)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRealtors(ctx, req.(*ListRealtorsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Realtor_GetRealtorStatus0_HTTP_Handler(srv RealtorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRealtorStatusRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealtorGetRealtorStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRealtorStatus(ctx, req.(*GetRealtorStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Realtor_UpdateRealtorStatus1_HTTP_Handler(srv RealtorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRealtorStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealtorUpdateRealtorStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRealtorStatus(ctx, req.(*UpdateRealtorStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

type RealtorHTTPClient interface {
	CreateRealtor(ctx context.Context, req *CreateRealtorRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	DeleteRealtor(ctx context.Context, req *DeleteRealtorRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	GetRealtor(ctx context.Context, req *GetRealtorRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	GetRealtorStatus(ctx context.Context, req *GetRealtorStatusRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	ListRealtors(ctx context.Context, req *ListRealtorsRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	UpdateRealtor(ctx context.Context, req *UpdateRealtorRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	UpdateRealtorStatus(ctx context.Context, req *UpdateRealtorStatusRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
}

type RealtorHTTPClientImpl struct {
	cc *http.Client
}

func NewRealtorHTTPClient(client *http.Client) RealtorHTTPClient {
	return &RealtorHTTPClientImpl{client}
}

func (c *RealtorHTTPClientImpl) CreateRealtor(ctx context.Context, in *CreateRealtorRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/realtors"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRealtorCreateRealtor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealtorHTTPClientImpl) DeleteRealtor(ctx context.Context, in *DeleteRealtorRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/realtors/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRealtorDeleteRealtor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealtorHTTPClientImpl) GetRealtor(ctx context.Context, in *GetRealtorRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/realtors/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRealtorGetRealtor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealtorHTTPClientImpl) GetRealtorStatus(ctx context.Context, in *GetRealtorStatusRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/realtors/{realtor_id}/status"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRealtorGetRealtorStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealtorHTTPClientImpl) ListRealtors(ctx context.Context, in *ListRealtorsRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/realtors"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRealtorListRealtors))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealtorHTTPClientImpl) UpdateRealtor(ctx context.Context, in *UpdateRealtorRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/realtors/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRealtorUpdateRealtor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealtorHTTPClientImpl) UpdateRealtorStatus(ctx context.Context, in *UpdateRealtorStatusRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/api/realtors/{realtor_id}/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRealtorUpdateRealtorStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
