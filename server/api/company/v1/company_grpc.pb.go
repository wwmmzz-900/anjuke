// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: company/v1/company.proto

package v1

import (
	v1 "anjuke/server/api/common/v1"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Company_CreateCompany_FullMethodName        = "/api.company.v1.Company/CreateCompany"
	Company_GetCompany_FullMethodName           = "/api.company.v1.Company/GetCompany"
	Company_UpdateCompany_FullMethodName        = "/api.company.v1.Company/UpdateCompany"
	Company_DeleteCompany_FullMethodName        = "/api.company.v1.Company/DeleteCompany"
	Company_ListCompanies_FullMethodName        = "/api.company.v1.Company/ListCompanies"
	Company_GetCompanyStores_FullMethodName     = "/api.company.v1.Company/GetCompanyStores"
	Company_GetStoresByCompanyID_FullMethodName = "/api.company.v1.Company/GetStoresByCompanyID"
)

// CompanyClient is the client API for Company service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 公司管理服务
type CompanyClient interface {
	// 创建公司
	CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 获取公司详情
	GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 更新公司信息
	UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 删除公司
	DeleteCompany(ctx context.Context, in *DeleteCompanyRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 查询公司列表
	ListCompanies(ctx context.Context, in *ListCompaniesRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 获取公司下的门店列表
	GetCompanyStores(ctx context.Context, in *GetCompanyStoresRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 获取公司下的门店列表（分页）
	GetStoresByCompanyID(ctx context.Context, in *GetStoresByCompanyIDRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
}

type companyClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyClient(cc grpc.ClientConnInterface) CompanyClient {
	return &companyClient{cc}
}

func (c *companyClient) CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Company_CreateCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Company_GetCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Company_UpdateCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) DeleteCompany(ctx context.Context, in *DeleteCompanyRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Company_DeleteCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) ListCompanies(ctx context.Context, in *ListCompaniesRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Company_ListCompanies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetCompanyStores(ctx context.Context, in *GetCompanyStoresRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Company_GetCompanyStores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetStoresByCompanyID(ctx context.Context, in *GetStoresByCompanyIDRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Company_GetStoresByCompanyID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServer is the server API for Company service.
// All implementations must embed UnimplementedCompanyServer
// for forward compatibility.
//
// 公司管理服务
type CompanyServer interface {
	// 创建公司
	CreateCompany(context.Context, *CreateCompanyRequest) (*v1.BaseResponse, error)
	// 获取公司详情
	GetCompany(context.Context, *GetCompanyRequest) (*v1.BaseResponse, error)
	// 更新公司信息
	UpdateCompany(context.Context, *UpdateCompanyRequest) (*v1.BaseResponse, error)
	// 删除公司
	DeleteCompany(context.Context, *DeleteCompanyRequest) (*v1.BaseResponse, error)
	// 查询公司列表
	ListCompanies(context.Context, *ListCompaniesRequest) (*v1.BaseResponse, error)
	// 获取公司下的门店列表
	GetCompanyStores(context.Context, *GetCompanyStoresRequest) (*v1.BaseResponse, error)
	// 获取公司下的门店列表（分页）
	GetStoresByCompanyID(context.Context, *GetStoresByCompanyIDRequest) (*v1.BaseResponse, error)
	mustEmbedUnimplementedCompanyServer()
}

// UnimplementedCompanyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCompanyServer struct{}

func (UnimplementedCompanyServer) CreateCompany(context.Context, *CreateCompanyRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompany not implemented")
}
func (UnimplementedCompanyServer) GetCompany(context.Context, *GetCompanyRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompany not implemented")
}
func (UnimplementedCompanyServer) UpdateCompany(context.Context, *UpdateCompanyRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompany not implemented")
}
func (UnimplementedCompanyServer) DeleteCompany(context.Context, *DeleteCompanyRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompany not implemented")
}
func (UnimplementedCompanyServer) ListCompanies(context.Context, *ListCompaniesRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanies not implemented")
}
func (UnimplementedCompanyServer) GetCompanyStores(context.Context, *GetCompanyStoresRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyStores not implemented")
}
func (UnimplementedCompanyServer) GetStoresByCompanyID(context.Context, *GetStoresByCompanyIDRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoresByCompanyID not implemented")
}
func (UnimplementedCompanyServer) mustEmbedUnimplementedCompanyServer() {}
func (UnimplementedCompanyServer) testEmbeddedByValue()                 {}

// UnsafeCompanyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyServer will
// result in compilation errors.
type UnsafeCompanyServer interface {
	mustEmbedUnimplementedCompanyServer()
}

func RegisterCompanyServer(s grpc.ServiceRegistrar, srv CompanyServer) {
	// If the following call pancis, it indicates UnimplementedCompanyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Company_ServiceDesc, srv)
}

func _Company_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Company_CreateCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).CreateCompany(ctx, req.(*CreateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Company_GetCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetCompany(ctx, req.(*GetCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Company_UpdateCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).UpdateCompany(ctx, req.(*UpdateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_DeleteCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).DeleteCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Company_DeleteCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).DeleteCompany(ctx, req.(*DeleteCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_ListCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompaniesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).ListCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Company_ListCompanies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).ListCompanies(ctx, req.(*ListCompaniesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetCompanyStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetCompanyStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Company_GetCompanyStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetCompanyStores(ctx, req.(*GetCompanyStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetStoresByCompanyID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoresByCompanyIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetStoresByCompanyID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Company_GetStoresByCompanyID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetStoresByCompanyID(ctx, req.(*GetStoresByCompanyIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Company_ServiceDesc is the grpc.ServiceDesc for Company service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Company_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.company.v1.Company",
	HandlerType: (*CompanyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCompany",
			Handler:    _Company_CreateCompany_Handler,
		},
		{
			MethodName: "GetCompany",
			Handler:    _Company_GetCompany_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _Company_UpdateCompany_Handler,
		},
		{
			MethodName: "DeleteCompany",
			Handler:    _Company_DeleteCompany_Handler,
		},
		{
			MethodName: "ListCompanies",
			Handler:    _Company_ListCompanies_Handler,
		},
		{
			MethodName: "GetCompanyStores",
			Handler:    _Company_GetCompanyStores_Handler,
		},
		{
			MethodName: "GetStoresByCompanyID",
			Handler:    _Company_GetStoresByCompanyID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company/v1/company.proto",
}

const (
	Store_CreateStore_FullMethodName          = "/api.company.v1.Store/CreateStore"
	Store_GetStore_FullMethodName             = "/api.company.v1.Store/GetStore"
	Store_UpdateStore_FullMethodName          = "/api.company.v1.Store/UpdateStore"
	Store_DeleteStore_FullMethodName          = "/api.company.v1.Store/DeleteStore"
	Store_ListStores_FullMethodName           = "/api.company.v1.Store/ListStores"
	Store_GetStoreRealtors_FullMethodName     = "/api.company.v1.Store/GetStoreRealtors"
	Store_GetRealtorsByStoreID_FullMethodName = "/api.company.v1.Store/GetRealtorsByStoreID"
	Store_ListAvailableStores_FullMethodName  = "/api.company.v1.Store/ListAvailableStores"
)

// StoreClient is the client API for Store service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 门店管理服务
type StoreClient interface {
	// 创建门店
	CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 获取门店详情
	GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 更新门店信息
	UpdateStore(ctx context.Context, in *UpdateStoreRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 删除门店
	DeleteStore(ctx context.Context, in *DeleteStoreRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 查询门店列表
	ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 获取门店下的经纪人列表
	GetStoreRealtors(ctx context.Context, in *GetStoreRealtorsRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 获取门店下的经纪人列表（分页）
	GetRealtorsByStoreID(ctx context.Context, in *GetRealtorsByStoreIDRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 获取可预约门店列表（包含预约相关信息）
	ListAvailableStores(ctx context.Context, in *ListAvailableStoresRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
}

type storeClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreClient(cc grpc.ClientConnInterface) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Store_CreateStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Store_GetStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) UpdateStore(ctx context.Context, in *UpdateStoreRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Store_UpdateStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) DeleteStore(ctx context.Context, in *DeleteStoreRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Store_DeleteStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Store_ListStores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetStoreRealtors(ctx context.Context, in *GetStoreRealtorsRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Store_GetStoreRealtors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetRealtorsByStoreID(ctx context.Context, in *GetRealtorsByStoreIDRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Store_GetRealtorsByStoreID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) ListAvailableStores(ctx context.Context, in *ListAvailableStoresRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Store_ListAvailableStores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServer is the server API for Store service.
// All implementations must embed UnimplementedStoreServer
// for forward compatibility.
//
// 门店管理服务
type StoreServer interface {
	// 创建门店
	CreateStore(context.Context, *CreateStoreRequest) (*v1.BaseResponse, error)
	// 获取门店详情
	GetStore(context.Context, *GetStoreRequest) (*v1.BaseResponse, error)
	// 更新门店信息
	UpdateStore(context.Context, *UpdateStoreRequest) (*v1.BaseResponse, error)
	// 删除门店
	DeleteStore(context.Context, *DeleteStoreRequest) (*v1.BaseResponse, error)
	// 查询门店列表
	ListStores(context.Context, *ListStoresRequest) (*v1.BaseResponse, error)
	// 获取门店下的经纪人列表
	GetStoreRealtors(context.Context, *GetStoreRealtorsRequest) (*v1.BaseResponse, error)
	// 获取门店下的经纪人列表（分页）
	GetRealtorsByStoreID(context.Context, *GetRealtorsByStoreIDRequest) (*v1.BaseResponse, error)
	// 获取可预约门店列表（包含预约相关信息）
	ListAvailableStores(context.Context, *ListAvailableStoresRequest) (*v1.BaseResponse, error)
	mustEmbedUnimplementedStoreServer()
}

// UnimplementedStoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStoreServer struct{}

func (UnimplementedStoreServer) CreateStore(context.Context, *CreateStoreRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStore not implemented")
}
func (UnimplementedStoreServer) GetStore(context.Context, *GetStoreRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStore not implemented")
}
func (UnimplementedStoreServer) UpdateStore(context.Context, *UpdateStoreRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStore not implemented")
}
func (UnimplementedStoreServer) DeleteStore(context.Context, *DeleteStoreRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStore not implemented")
}
func (UnimplementedStoreServer) ListStores(context.Context, *ListStoresRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStores not implemented")
}
func (UnimplementedStoreServer) GetStoreRealtors(context.Context, *GetStoreRealtorsRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreRealtors not implemented")
}
func (UnimplementedStoreServer) GetRealtorsByStoreID(context.Context, *GetRealtorsByStoreIDRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealtorsByStoreID not implemented")
}
func (UnimplementedStoreServer) ListAvailableStores(context.Context, *ListAvailableStoresRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableStores not implemented")
}
func (UnimplementedStoreServer) mustEmbedUnimplementedStoreServer() {}
func (UnimplementedStoreServer) testEmbeddedByValue()               {}

// UnsafeStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServer will
// result in compilation errors.
type UnsafeStoreServer interface {
	mustEmbedUnimplementedStoreServer()
}

func RegisterStoreServer(s grpc.ServiceRegistrar, srv StoreServer) {
	// If the following call pancis, it indicates UnimplementedStoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Store_ServiceDesc, srv)
}

func _Store_CreateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).CreateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_CreateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).CreateStore(ctx, req.(*CreateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_GetStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetStore(ctx, req.(*GetStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_UpdateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).UpdateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_UpdateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).UpdateStore(ctx, req.(*UpdateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_DeleteStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).DeleteStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_DeleteStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).DeleteStore(ctx, req.(*DeleteStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_ListStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).ListStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_ListStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).ListStores(ctx, req.(*ListStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetStoreRealtors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreRealtorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetStoreRealtors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_GetStoreRealtors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetStoreRealtors(ctx, req.(*GetStoreRealtorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetRealtorsByStoreID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealtorsByStoreIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetRealtorsByStoreID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_GetRealtorsByStoreID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetRealtorsByStoreID(ctx, req.(*GetRealtorsByStoreIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_ListAvailableStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).ListAvailableStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_ListAvailableStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).ListAvailableStores(ctx, req.(*ListAvailableStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Store_ServiceDesc is the grpc.ServiceDesc for Store service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Store_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.company.v1.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStore",
			Handler:    _Store_CreateStore_Handler,
		},
		{
			MethodName: "GetStore",
			Handler:    _Store_GetStore_Handler,
		},
		{
			MethodName: "UpdateStore",
			Handler:    _Store_UpdateStore_Handler,
		},
		{
			MethodName: "DeleteStore",
			Handler:    _Store_DeleteStore_Handler,
		},
		{
			MethodName: "ListStores",
			Handler:    _Store_ListStores_Handler,
		},
		{
			MethodName: "GetStoreRealtors",
			Handler:    _Store_GetStoreRealtors_Handler,
		},
		{
			MethodName: "GetRealtorsByStoreID",
			Handler:    _Store_GetRealtorsByStoreID_Handler,
		},
		{
			MethodName: "ListAvailableStores",
			Handler:    _Store_ListAvailableStores_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company/v1/company.proto",
}

const (
	Realtor_CreateRealtor_FullMethodName       = "/api.company.v1.Realtor/CreateRealtor"
	Realtor_GetRealtor_FullMethodName          = "/api.company.v1.Realtor/GetRealtor"
	Realtor_UpdateRealtor_FullMethodName       = "/api.company.v1.Realtor/UpdateRealtor"
	Realtor_DeleteRealtor_FullMethodName       = "/api.company.v1.Realtor/DeleteRealtor"
	Realtor_ListRealtors_FullMethodName        = "/api.company.v1.Realtor/ListRealtors"
	Realtor_GetRealtorStatus_FullMethodName    = "/api.company.v1.Realtor/GetRealtorStatus"
	Realtor_UpdateRealtorStatus_FullMethodName = "/api.company.v1.Realtor/UpdateRealtorStatus"
)

// RealtorClient is the client API for Realtor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 经纪人管理服务
type RealtorClient interface {
	// 创建经纪人
	CreateRealtor(ctx context.Context, in *CreateRealtorRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 获取经纪人详情
	GetRealtor(ctx context.Context, in *GetRealtorRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 更新经纪人信息
	UpdateRealtor(ctx context.Context, in *UpdateRealtorRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 删除经纪人
	DeleteRealtor(ctx context.Context, in *DeleteRealtorRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 查询经纪人列表
	ListRealtors(ctx context.Context, in *ListRealtorsRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 获取经纪人状态
	GetRealtorStatus(ctx context.Context, in *GetRealtorStatusRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 更新经纪人状态
	UpdateRealtorStatus(ctx context.Context, in *UpdateRealtorStatusRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
}

type realtorClient struct {
	cc grpc.ClientConnInterface
}

func NewRealtorClient(cc grpc.ClientConnInterface) RealtorClient {
	return &realtorClient{cc}
}

func (c *realtorClient) CreateRealtor(ctx context.Context, in *CreateRealtorRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Realtor_CreateRealtor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtorClient) GetRealtor(ctx context.Context, in *GetRealtorRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Realtor_GetRealtor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtorClient) UpdateRealtor(ctx context.Context, in *UpdateRealtorRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Realtor_UpdateRealtor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtorClient) DeleteRealtor(ctx context.Context, in *DeleteRealtorRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Realtor_DeleteRealtor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtorClient) ListRealtors(ctx context.Context, in *ListRealtorsRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Realtor_ListRealtors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtorClient) GetRealtorStatus(ctx context.Context, in *GetRealtorStatusRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Realtor_GetRealtorStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtorClient) UpdateRealtorStatus(ctx context.Context, in *UpdateRealtorStatusRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Realtor_UpdateRealtorStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RealtorServer is the server API for Realtor service.
// All implementations must embed UnimplementedRealtorServer
// for forward compatibility.
//
// 经纪人管理服务
type RealtorServer interface {
	// 创建经纪人
	CreateRealtor(context.Context, *CreateRealtorRequest) (*v1.BaseResponse, error)
	// 获取经纪人详情
	GetRealtor(context.Context, *GetRealtorRequest) (*v1.BaseResponse, error)
	// 更新经纪人信息
	UpdateRealtor(context.Context, *UpdateRealtorRequest) (*v1.BaseResponse, error)
	// 删除经纪人
	DeleteRealtor(context.Context, *DeleteRealtorRequest) (*v1.BaseResponse, error)
	// 查询经纪人列表
	ListRealtors(context.Context, *ListRealtorsRequest) (*v1.BaseResponse, error)
	// 获取经纪人状态
	GetRealtorStatus(context.Context, *GetRealtorStatusRequest) (*v1.BaseResponse, error)
	// 更新经纪人状态
	UpdateRealtorStatus(context.Context, *UpdateRealtorStatusRequest) (*v1.BaseResponse, error)
	mustEmbedUnimplementedRealtorServer()
}

// UnimplementedRealtorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRealtorServer struct{}

func (UnimplementedRealtorServer) CreateRealtor(context.Context, *CreateRealtorRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRealtor not implemented")
}
func (UnimplementedRealtorServer) GetRealtor(context.Context, *GetRealtorRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealtor not implemented")
}
func (UnimplementedRealtorServer) UpdateRealtor(context.Context, *UpdateRealtorRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRealtor not implemented")
}
func (UnimplementedRealtorServer) DeleteRealtor(context.Context, *DeleteRealtorRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRealtor not implemented")
}
func (UnimplementedRealtorServer) ListRealtors(context.Context, *ListRealtorsRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRealtors not implemented")
}
func (UnimplementedRealtorServer) GetRealtorStatus(context.Context, *GetRealtorStatusRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealtorStatus not implemented")
}
func (UnimplementedRealtorServer) UpdateRealtorStatus(context.Context, *UpdateRealtorStatusRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRealtorStatus not implemented")
}
func (UnimplementedRealtorServer) mustEmbedUnimplementedRealtorServer() {}
func (UnimplementedRealtorServer) testEmbeddedByValue()                 {}

// UnsafeRealtorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RealtorServer will
// result in compilation errors.
type UnsafeRealtorServer interface {
	mustEmbedUnimplementedRealtorServer()
}

func RegisterRealtorServer(s grpc.ServiceRegistrar, srv RealtorServer) {
	// If the following call pancis, it indicates UnimplementedRealtorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Realtor_ServiceDesc, srv)
}

func _Realtor_CreateRealtor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRealtorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtorServer).CreateRealtor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Realtor_CreateRealtor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtorServer).CreateRealtor(ctx, req.(*CreateRealtorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Realtor_GetRealtor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealtorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtorServer).GetRealtor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Realtor_GetRealtor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtorServer).GetRealtor(ctx, req.(*GetRealtorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Realtor_UpdateRealtor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRealtorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtorServer).UpdateRealtor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Realtor_UpdateRealtor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtorServer).UpdateRealtor(ctx, req.(*UpdateRealtorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Realtor_DeleteRealtor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRealtorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtorServer).DeleteRealtor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Realtor_DeleteRealtor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtorServer).DeleteRealtor(ctx, req.(*DeleteRealtorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Realtor_ListRealtors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRealtorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtorServer).ListRealtors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Realtor_ListRealtors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtorServer).ListRealtors(ctx, req.(*ListRealtorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Realtor_GetRealtorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealtorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtorServer).GetRealtorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Realtor_GetRealtorStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtorServer).GetRealtorStatus(ctx, req.(*GetRealtorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Realtor_UpdateRealtorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRealtorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtorServer).UpdateRealtorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Realtor_UpdateRealtorStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtorServer).UpdateRealtorStatus(ctx, req.(*UpdateRealtorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Realtor_ServiceDesc is the grpc.ServiceDesc for Realtor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Realtor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.company.v1.Realtor",
	HandlerType: (*RealtorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRealtor",
			Handler:    _Realtor_CreateRealtor_Handler,
		},
		{
			MethodName: "GetRealtor",
			Handler:    _Realtor_GetRealtor_Handler,
		},
		{
			MethodName: "UpdateRealtor",
			Handler:    _Realtor_UpdateRealtor_Handler,
		},
		{
			MethodName: "DeleteRealtor",
			Handler:    _Realtor_DeleteRealtor_Handler,
		},
		{
			MethodName: "ListRealtors",
			Handler:    _Realtor_ListRealtors_Handler,
		},
		{
			MethodName: "GetRealtorStatus",
			Handler:    _Realtor_GetRealtorStatus_Handler,
		},
		{
			MethodName: "UpdateRealtorStatus",
			Handler:    _Realtor_UpdateRealtorStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company/v1/company.proto",
}
