// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: user/v2/user.proto

package v2

import (
	v1 "anjuke/server/api/common/v1"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserCreateUser = "/api.user.v2.User/CreateUser"
const OperationUserDeleteFile = "/api.user.v2.User/DeleteFile"
const OperationUserGetFileList = "/api.user.v2.User/GetFileList"
const OperationUserGetUploadStats = "/api.user.v2.User/GetUploadStats"
const OperationUserLogin = "/api.user.v2.User/Login"
const OperationUserRealName = "/api.user.v2.User/RealName"
const OperationUserSendSms = "/api.user.v2.User/SendSms"
const OperationUserUpdateUserStatus = "/api.user.v2.User/UpdateUserStatus"
const OperationUserVerifySms = "/api.user.v2.User/VerifySms"

type UserHTTPServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*v1.BaseResponse, error)
	// DeleteFile 删除文件
	DeleteFile(context.Context, *DeleteFileRequest) (*v1.BaseResponse, error)
	// GetFileList 获取文件列表
	GetFileList(context.Context, *GetFileListRequest) (*v1.BaseResponse, error)
	// GetUploadStats 获取上传统计
	GetUploadStats(context.Context, *GetUploadStatsRequest) (*v1.BaseResponse, error)
	Login(context.Context, *LoginRequest) (*v1.BaseResponse, error)
	RealName(context.Context, *RealNameRequest) (*v1.BaseResponse, error)
	SendSms(context.Context, *SendSmsRequest) (*v1.BaseResponse, error)
	UpdateUserStatus(context.Context, *UpdateUserStatusRequest) (*v1.BaseResponse, error)
	VerifySms(context.Context, *VerifySmsRequest) (*v1.BaseResponse, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.POST("/user/create", _User_CreateUser0_HTTP_Handler(srv))
	r.POST("/user/realname", _User_RealName0_HTTP_Handler(srv))
	r.POST("/user/updateUserStatus", _User_UpdateUserStatus0_HTTP_Handler(srv))
	r.POST("/user/sendSms", _User_SendSms0_HTTP_Handler(srv))
	r.POST("/user/verifySms", _User_VerifySms0_HTTP_Handler(srv))
	r.POST("/user/login", _User_Login0_HTTP_Handler(srv))
	r.GET("/user/fileList", _User_GetFileList0_HTTP_Handler(srv))
	r.GET("/user/uploadStats", _User_GetUploadStats0_HTTP_Handler(srv))
	r.DELETE("/file/{object_name}", _User_DeleteFile0_HTTP_Handler(srv))
}

func _User_CreateUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserCreateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _User_RealName0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RealNameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRealName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RealName(ctx, req.(*RealNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _User_UpdateUserStatus0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUpdateUserStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserStatus(ctx, req.(*UpdateUserStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _User_SendSms0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendSmsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSendSms)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendSms(ctx, req.(*SendSmsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _User_VerifySms0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifySmsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserVerifySms)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifySms(ctx, req.(*VerifySmsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _User_Login0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _User_GetFileList0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFileListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetFileList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFileList(ctx, req.(*GetFileListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _User_GetUploadStats0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUploadStatsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetUploadStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUploadStats(ctx, req.(*GetUploadStatsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _User_DeleteFile0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteFileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDeleteFile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteFile(ctx, req.(*DeleteFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	CreateUser(ctx context.Context, req *CreateUserRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	DeleteFile(ctx context.Context, req *DeleteFileRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	GetFileList(ctx context.Context, req *GetFileListRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	GetUploadStats(ctx context.Context, req *GetUploadStatsRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	RealName(ctx context.Context, req *RealNameRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	SendSms(ctx context.Context, req *SendSmsRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	UpdateUserStatus(ctx context.Context, req *UpdateUserStatusRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	VerifySms(ctx context.Context, req *VerifySmsRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/user/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserCreateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/file/{object_name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserDeleteFile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) GetFileList(ctx context.Context, in *GetFileListRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/user/fileList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGetFileList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) GetUploadStats(ctx context.Context, in *GetUploadStatsRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/user/uploadStats"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGetUploadStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) RealName(ctx context.Context, in *RealNameRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/user/realname"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserRealName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) SendSms(ctx context.Context, in *SendSmsRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/user/sendSms"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSendSms))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) UpdateUserStatus(ctx context.Context, in *UpdateUserStatusRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/user/updateUserStatus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUpdateUserStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) VerifySms(ctx context.Context, in *VerifySmsRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/user/verifySms"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserVerifySms))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
