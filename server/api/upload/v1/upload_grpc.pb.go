// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: upload/v1/upload.proto

package uploadv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UploadService_InitUpload_FullMethodName     = "/api.upload.v1.UploadService/InitUpload"
	UploadService_UploadPart_FullMethodName     = "/api.upload.v1.UploadService/UploadPart"
	UploadService_CompleteUpload_FullMethodName = "/api.upload.v1.UploadService/CompleteUpload"
	UploadService_ListParts_FullMethodName      = "/api.upload.v1.UploadService/ListParts"
	UploadService_AbortUpload_FullMethodName    = "/api.upload.v1.UploadService/AbortUpload"
	UploadService_SimpleUpload_FullMethodName   = "/api.upload.v1.UploadService/SimpleUpload"
)

// UploadServiceClient is the client API for UploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 上传服务
type UploadServiceClient interface {
	// 初始化分片上传
	InitUpload(ctx context.Context, in *InitUploadRequest, opts ...grpc.CallOption) (*InitUploadReply, error)
	// 上传分片
	UploadPart(ctx context.Context, in *UploadPartRequest, opts ...grpc.CallOption) (*UploadPartReply, error)
	// 完成上传
	CompleteUpload(ctx context.Context, in *CompleteUploadRequest, opts ...grpc.CallOption) (*CompleteUploadReply, error)
	// 查询已上传分片
	ListParts(ctx context.Context, in *ListPartsRequest, opts ...grpc.CallOption) (*ListPartsReply, error)
	// 中止上传
	AbortUpload(ctx context.Context, in *AbortUploadRequest, opts ...grpc.CallOption) (*AbortUploadReply, error)
	// 简单上传（小文件）
	SimpleUpload(ctx context.Context, in *SimpleUploadRequest, opts ...grpc.CallOption) (*SimpleUploadReply, error)
}

type uploadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadServiceClient(cc grpc.ClientConnInterface) UploadServiceClient {
	return &uploadServiceClient{cc}
}

func (c *uploadServiceClient) InitUpload(ctx context.Context, in *InitUploadRequest, opts ...grpc.CallOption) (*InitUploadReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitUploadReply)
	err := c.cc.Invoke(ctx, UploadService_InitUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadServiceClient) UploadPart(ctx context.Context, in *UploadPartRequest, opts ...grpc.CallOption) (*UploadPartReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadPartReply)
	err := c.cc.Invoke(ctx, UploadService_UploadPart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadServiceClient) CompleteUpload(ctx context.Context, in *CompleteUploadRequest, opts ...grpc.CallOption) (*CompleteUploadReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteUploadReply)
	err := c.cc.Invoke(ctx, UploadService_CompleteUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadServiceClient) ListParts(ctx context.Context, in *ListPartsRequest, opts ...grpc.CallOption) (*ListPartsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPartsReply)
	err := c.cc.Invoke(ctx, UploadService_ListParts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadServiceClient) AbortUpload(ctx context.Context, in *AbortUploadRequest, opts ...grpc.CallOption) (*AbortUploadReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbortUploadReply)
	err := c.cc.Invoke(ctx, UploadService_AbortUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadServiceClient) SimpleUpload(ctx context.Context, in *SimpleUploadRequest, opts ...grpc.CallOption) (*SimpleUploadReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleUploadReply)
	err := c.cc.Invoke(ctx, UploadService_SimpleUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadServiceServer is the server API for UploadService service.
// All implementations must embed UnimplementedUploadServiceServer
// for forward compatibility.
//
// 上传服务
type UploadServiceServer interface {
	// 初始化分片上传
	InitUpload(context.Context, *InitUploadRequest) (*InitUploadReply, error)
	// 上传分片
	UploadPart(context.Context, *UploadPartRequest) (*UploadPartReply, error)
	// 完成上传
	CompleteUpload(context.Context, *CompleteUploadRequest) (*CompleteUploadReply, error)
	// 查询已上传分片
	ListParts(context.Context, *ListPartsRequest) (*ListPartsReply, error)
	// 中止上传
	AbortUpload(context.Context, *AbortUploadRequest) (*AbortUploadReply, error)
	// 简单上传（小文件）
	SimpleUpload(context.Context, *SimpleUploadRequest) (*SimpleUploadReply, error)
	mustEmbedUnimplementedUploadServiceServer()
}

// UnimplementedUploadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUploadServiceServer struct{}

func (UnimplementedUploadServiceServer) InitUpload(context.Context, *InitUploadRequest) (*InitUploadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitUpload not implemented")
}
func (UnimplementedUploadServiceServer) UploadPart(context.Context, *UploadPartRequest) (*UploadPartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPart not implemented")
}
func (UnimplementedUploadServiceServer) CompleteUpload(context.Context, *CompleteUploadRequest) (*CompleteUploadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteUpload not implemented")
}
func (UnimplementedUploadServiceServer) ListParts(context.Context, *ListPartsRequest) (*ListPartsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParts not implemented")
}
func (UnimplementedUploadServiceServer) AbortUpload(context.Context, *AbortUploadRequest) (*AbortUploadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortUpload not implemented")
}
func (UnimplementedUploadServiceServer) SimpleUpload(context.Context, *SimpleUploadRequest) (*SimpleUploadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleUpload not implemented")
}
func (UnimplementedUploadServiceServer) mustEmbedUnimplementedUploadServiceServer() {}
func (UnimplementedUploadServiceServer) testEmbeddedByValue()                       {}

// UnsafeUploadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadServiceServer will
// result in compilation errors.
type UnsafeUploadServiceServer interface {
	mustEmbedUnimplementedUploadServiceServer()
}

func RegisterUploadServiceServer(s grpc.ServiceRegistrar, srv UploadServiceServer) {
	// If the following call pancis, it indicates UnimplementedUploadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UploadService_ServiceDesc, srv)
}

func _UploadService_InitUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).InitUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_InitUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).InitUpload(ctx, req.(*InitUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadService_UploadPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).UploadPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_UploadPart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).UploadPart(ctx, req.(*UploadPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadService_CompleteUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).CompleteUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_CompleteUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).CompleteUpload(ctx, req.(*CompleteUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadService_ListParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).ListParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_ListParts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).ListParts(ctx, req.(*ListPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadService_AbortUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).AbortUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_AbortUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).AbortUpload(ctx, req.(*AbortUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadService_SimpleUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).SimpleUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_SimpleUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).SimpleUpload(ctx, req.(*SimpleUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UploadService_ServiceDesc is the grpc.ServiceDesc for UploadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.upload.v1.UploadService",
	HandlerType: (*UploadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitUpload",
			Handler:    _UploadService_InitUpload_Handler,
		},
		{
			MethodName: "UploadPart",
			Handler:    _UploadService_UploadPart_Handler,
		},
		{
			MethodName: "CompleteUpload",
			Handler:    _UploadService_CompleteUpload_Handler,
		},
		{
			MethodName: "ListParts",
			Handler:    _UploadService_ListParts_Handler,
		},
		{
			MethodName: "AbortUpload",
			Handler:    _UploadService_AbortUpload_Handler,
		},
		{
			MethodName: "SimpleUpload",
			Handler:    _UploadService_SimpleUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upload/v1/upload.proto",
}
