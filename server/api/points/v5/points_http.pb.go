// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: points/v5/points.proto

package v5

import (
	v1 "anjuke/server/api/common/v1"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPointsCheckIn = "/api.points.v5.Points/CheckIn"
const OperationPointsEarnPointsByConsume = "/api.points.v5.Points/EarnPointsByConsume"
const OperationPointsGetPointsHistory = "/api.points.v5.Points/GetPointsHistory"
const OperationPointsGetUserPoints = "/api.points.v5.Points/GetUserPoints"
const OperationPointsUsePoints = "/api.points.v5.Points/UsePoints"

type PointsHTTPServer interface {
	// CheckIn 签到获取积分
	CheckIn(context.Context, *CheckInRequest) (*v1.BaseResponse, error)
	// EarnPointsByConsume 消费获取积分
	EarnPointsByConsume(context.Context, *EarnPointsByConsumeRequest) (*v1.BaseResponse, error)
	// GetPointsHistory 查询积分明细记录
	GetPointsHistory(context.Context, *GetPointsHistoryRequest) (*v1.BaseResponse, error)
	// GetUserPoints 查询用户积分余额
	GetUserPoints(context.Context, *GetUserPointsRequest) (*v1.BaseResponse, error)
	// UsePoints 使用积分抵扣
	UsePoints(context.Context, *UsePointsRequest) (*v1.BaseResponse, error)
}

func RegisterPointsHTTPServer(s *http.Server, srv PointsHTTPServer) {
	r := s.Route("/")
	r.GET("/points/balance/{user_id}", _Points_GetUserPoints0_HTTP_Handler(srv))
	r.GET("/points/history/{user_id}", _Points_GetPointsHistory0_HTTP_Handler(srv))
	r.POST("/points/checkin", _Points_CheckIn0_HTTP_Handler(srv))
	r.POST("/points/earn/consume", _Points_EarnPointsByConsume0_HTTP_Handler(srv))
	r.POST("/points/use", _Points_UsePoints0_HTTP_Handler(srv))
}

func _Points_GetUserPoints0_HTTP_Handler(srv PointsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserPointsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPointsGetUserPoints)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserPoints(ctx, req.(*GetUserPointsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Points_GetPointsHistory0_HTTP_Handler(srv PointsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPointsHistoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPointsGetPointsHistory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPointsHistory(ctx, req.(*GetPointsHistoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Points_CheckIn0_HTTP_Handler(srv PointsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckInRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPointsCheckIn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckIn(ctx, req.(*CheckInRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Points_EarnPointsByConsume0_HTTP_Handler(srv PointsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EarnPointsByConsumeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPointsEarnPointsByConsume)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EarnPointsByConsume(ctx, req.(*EarnPointsByConsumeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

func _Points_UsePoints0_HTTP_Handler(srv PointsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UsePointsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPointsUsePoints)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UsePoints(ctx, req.(*UsePointsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BaseResponse)
		return ctx.Result(200, reply)
	}
}

type PointsHTTPClient interface {
	CheckIn(ctx context.Context, req *CheckInRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	EarnPointsByConsume(ctx context.Context, req *EarnPointsByConsumeRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	GetPointsHistory(ctx context.Context, req *GetPointsHistoryRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	GetUserPoints(ctx context.Context, req *GetUserPointsRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
	UsePoints(ctx context.Context, req *UsePointsRequest, opts ...http.CallOption) (rsp *v1.BaseResponse, err error)
}

type PointsHTTPClientImpl struct {
	cc *http.Client
}

func NewPointsHTTPClient(client *http.Client) PointsHTTPClient {
	return &PointsHTTPClientImpl{client}
}

func (c *PointsHTTPClientImpl) CheckIn(ctx context.Context, in *CheckInRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/points/checkin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPointsCheckIn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PointsHTTPClientImpl) EarnPointsByConsume(ctx context.Context, in *EarnPointsByConsumeRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/points/earn/consume"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPointsEarnPointsByConsume))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PointsHTTPClientImpl) GetPointsHistory(ctx context.Context, in *GetPointsHistoryRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/points/history/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPointsGetPointsHistory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PointsHTTPClientImpl) GetUserPoints(ctx context.Context, in *GetUserPointsRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/points/balance/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPointsGetUserPoints))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PointsHTTPClientImpl) UsePoints(ctx context.Context, in *UsePointsRequest, opts ...http.CallOption) (*v1.BaseResponse, error) {
	var out v1.BaseResponse
	pattern := "/points/use"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPointsUsePoints))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
