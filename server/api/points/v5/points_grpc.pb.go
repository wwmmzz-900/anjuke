// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: points/v5/points.proto

package v5

import (
	v1 "anjuke/server/api/common/v1"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Points_GetUserPoints_FullMethodName       = "/api.points.v5.Points/GetUserPoints"
	Points_GetPointsHistory_FullMethodName    = "/api.points.v5.Points/GetPointsHistory"
	Points_CheckIn_FullMethodName             = "/api.points.v5.Points/CheckIn"
	Points_EarnPointsByConsume_FullMethodName = "/api.points.v5.Points/EarnPointsByConsume"
	Points_UsePoints_FullMethodName           = "/api.points.v5.Points/UsePoints"
)

// PointsClient is the client API for Points service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PointsClient interface {
	// 查询用户积分余额
	GetUserPoints(ctx context.Context, in *GetUserPointsRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 查询积分明细记录
	GetPointsHistory(ctx context.Context, in *GetPointsHistoryRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 签到获取积分
	CheckIn(ctx context.Context, in *CheckInRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 消费获取积分
	EarnPointsByConsume(ctx context.Context, in *EarnPointsByConsumeRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// 使用积分抵扣
	UsePoints(ctx context.Context, in *UsePointsRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error)
}

type pointsClient struct {
	cc grpc.ClientConnInterface
}

func NewPointsClient(cc grpc.ClientConnInterface) PointsClient {
	return &pointsClient{cc}
}

func (c *pointsClient) GetUserPoints(ctx context.Context, in *GetUserPointsRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Points_GetUserPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) GetPointsHistory(ctx context.Context, in *GetPointsHistoryRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Points_GetPointsHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) CheckIn(ctx context.Context, in *CheckInRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Points_CheckIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) EarnPointsByConsume(ctx context.Context, in *EarnPointsByConsumeRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Points_EarnPointsByConsume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) UsePoints(ctx context.Context, in *UsePointsRequest, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, Points_UsePoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PointsServer is the server API for Points service.
// All implementations must embed UnimplementedPointsServer
// for forward compatibility.
type PointsServer interface {
	// 查询用户积分余额
	GetUserPoints(context.Context, *GetUserPointsRequest) (*v1.BaseResponse, error)
	// 查询积分明细记录
	GetPointsHistory(context.Context, *GetPointsHistoryRequest) (*v1.BaseResponse, error)
	// 签到获取积分
	CheckIn(context.Context, *CheckInRequest) (*v1.BaseResponse, error)
	// 消费获取积分
	EarnPointsByConsume(context.Context, *EarnPointsByConsumeRequest) (*v1.BaseResponse, error)
	// 使用积分抵扣
	UsePoints(context.Context, *UsePointsRequest) (*v1.BaseResponse, error)
	mustEmbedUnimplementedPointsServer()
}

// UnimplementedPointsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPointsServer struct{}

func (UnimplementedPointsServer) GetUserPoints(context.Context, *GetUserPointsRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPoints not implemented")
}
func (UnimplementedPointsServer) GetPointsHistory(context.Context, *GetPointsHistoryRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPointsHistory not implemented")
}
func (UnimplementedPointsServer) CheckIn(context.Context, *CheckInRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIn not implemented")
}
func (UnimplementedPointsServer) EarnPointsByConsume(context.Context, *EarnPointsByConsumeRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EarnPointsByConsume not implemented")
}
func (UnimplementedPointsServer) UsePoints(context.Context, *UsePointsRequest) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsePoints not implemented")
}
func (UnimplementedPointsServer) mustEmbedUnimplementedPointsServer() {}
func (UnimplementedPointsServer) testEmbeddedByValue()                {}

// UnsafePointsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PointsServer will
// result in compilation errors.
type UnsafePointsServer interface {
	mustEmbedUnimplementedPointsServer()
}

func RegisterPointsServer(s grpc.ServiceRegistrar, srv PointsServer) {
	// If the following call pancis, it indicates UnimplementedPointsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Points_ServiceDesc, srv)
}

func _Points_GetUserPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).GetUserPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_GetUserPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).GetUserPoints(ctx, req.(*GetUserPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_GetPointsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPointsHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).GetPointsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_GetPointsHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).GetPointsHistory(ctx, req.(*GetPointsHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_CheckIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).CheckIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_CheckIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).CheckIn(ctx, req.(*CheckInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_EarnPointsByConsume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EarnPointsByConsumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).EarnPointsByConsume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_EarnPointsByConsume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).EarnPointsByConsume(ctx, req.(*EarnPointsByConsumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_UsePoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsePointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).UsePoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_UsePoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).UsePoints(ctx, req.(*UsePointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Points_ServiceDesc is the grpc.ServiceDesc for Points service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Points_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.points.v5.Points",
	HandlerType: (*PointsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserPoints",
			Handler:    _Points_GetUserPoints_Handler,
		},
		{
			MethodName: "GetPointsHistory",
			Handler:    _Points_GetPointsHistory_Handler,
		},
		{
			MethodName: "CheckIn",
			Handler:    _Points_CheckIn_Handler,
		},
		{
			MethodName: "EarnPointsByConsume",
			Handler:    _Points_EarnPointsByConsume_Handler,
		},
		{
			MethodName: "UsePoints",
			Handler:    _Points_UsePoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "points/v5/points.proto",
}
