// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/wwmmzz-900/anjuke/internal/biz"
	"github.com/wwmmzz-900/anjuke/internal/conf"
	"github.com/wwmmzz-900/anjuke/internal/data"
	"github.com/wwmmzz-900/anjuke/internal/server"
	"github.com/wwmmzz-900/anjuke/internal/service"
)

import (
	_ "github.com/wwmmzz-900/anjuke/init"
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db, err := data.MysqlInit(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	client, err := data.ExampleClient(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(confData, logger, db, client)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	greeterService := service.NewGreeterService(greeterUsecase)
	userRepo := data.NewUserRepo(dataData, logger)
	userUsecase := biz.NewUserUsecase(userRepo, logger)
	userService := service.NewUserService(userUsecase)
	houseRepo := data.NewHouseRepo(dataData)
	houseUsecase := biz.NewHouseUsecase(houseRepo)
	houseService := service.NewHouseService(houseUsecase)
	transactionRepo := data.NewTransactionRepo(dataData, logger)
	transactionUsecase := biz.NewTransactionUsecase(transactionRepo, logger)
	transactionService := service.NewTransactionService(transactionUsecase)
	pointsRepo := data.NewPointsRepo(dataData, logger)
	pointsUsecase := biz.NewPointsUsecase(pointsRepo, logger)
	pointsService := service.NewPointsService(pointsUsecase)
	customerRepo := data.NewCustomerRepo(dataData, logger)
	customerUsecase := biz.NewCustomerUsecase(customerRepo, logger)
	customerService := service.NewCustomerService(customerUsecase)
	bloggerProfileRepo := data.NewBloggerProfileRepo(dataData, logger)
	bloggerProfileUsecase := biz.NewBloggerProfileUsecase(bloggerProfileRepo, logger)
	bloggerProfileService := service.NewBloggerProfileService(bloggerProfileUsecase)
	grpcServer := server.NewGRPCServer(confServer, greeterService, userService, houseService, transactionService, pointsService, customerService, bloggerProfileService, logger)
	httpServer := server.NewHTTPServer(confServer, greeterService, userService, houseService, transactionService, pointsService, customerService, bloggerProfileService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
